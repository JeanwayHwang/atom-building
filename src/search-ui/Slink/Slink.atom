<template>
    <c-link
        :url="url"
        :params="params"
        :class="cls"
        :rl-type="!isJump
            ? 'button'
            : null
        "
        rl-node
        rl-highlight-color="rgba(0, 0, 0, .08)"
        rl-highlight-radius="5px"
        class="c-slink"
        @rlShow.native="onRlShow"
        @rlHide.native="onRlHide"
        @click="$emit('click', $event)"
    >
        <c-icon
            a-if="!!iconType"
            :type="iconType"
            class="c-gap-right-small"
            aria-hidden="true"
        />
        <span
            :style="{
                color: textColor
            }"
        >
            {{ text }}
        </span>
        <span
            a-if="tail"
            :style="{color: tailColor}"
        >
            {{ tail }}
        </span>
        <c-label
            a-if="label"
            :text="label"
            :type="labelType"
            class="c-gap-left-small"
        />
    </c-link>
</template>

<script type="config">
{
    props: {

        /**
         * 短链类型，可选值：default、strong、auto
         */
        type: {
            type: String,
            default: 'default'
        },

        /**
         * 跳转链接
         */
        url: String,

        /**
         * 跳转链接所需参数
         *
         * @see See [Link](./Link#API) `params`
         */
        params: Object,

        /**
         * 短链内容
         */
        text: String,

        /**
         * 短链尾部文字
         */
        tail: String,

        /**
         * 短链内容颜色
         */
        textColor: String,

        /**
         * 短链尾部文字颜色
         */
        tailColor: String,

        /**
         * 图标类型
         */
        iconType: String,

        /**
         * 文字标签
         */
        label: String,

        /**
         * 文字标签类型
         *
         * @see See [Label](./Label#API) `type`
         */
        labelType: String,

        /**
         * 控制不添加上下的间距
         */
        noGap: {
            type: Boolean,
            default: false
        }
    },
    computed: {
        cls: {
            'c-slink-new': type === 'default',
            'c-slink-new-strong': type === 'strong',
            'c-slink-auto': type === 'auto',
            'c-gap-top-small': !noGap,
            'c-gap-bottom-small': !noGap,
            'c-slink-touchable-active': touchActive
        },
        isJump: !!(url || (params && params.tcUrl))
    },
    data: {
        touchActive: false
    },
    components: {
        'c-link': '../Link/Link',
        'c-icon': '../Icon/Icon',
        'c-label': '../Label/Label'
    }
}
</script>

<script>
export default {
    methods: {
        onRlShow(e) {
            // 使用 ResponsiveLink 提供的事件来实现自定义 background 点击态
            // 使用 background 是因为全局的点击态在位置变化时会错位，而使用 rl-highlight-self 可能会影响组件的布局
            // 自定义实现方案依赖 js 执行，自然模板如果不输出 js 则仍是全局的点击态
            this.touchActive = true;
            e.preventDefault();
        },
        onRlHide(e) {
            this.touchActive = false;
        }
    }
};

/**
 * 点击事件
 *
 * @event click
 * @property {Event} param1 透传点击事件
 */
</script>


<style lang="less" scoped>
// line-height 2 = 28 / 14, 2.7143 = 28/ 14
.c-slink-new,
.c-slink-new-strong,
.c-slink-auto {
    font: 14px Arial, Helvetica, sans-serif;
    line-height: 2;
    height: auto;
    border-radius: 5px;
}
.c-slink-new {
    height: auto;
}
.c-slink-new-strong {
    height: auto;
    line-height: 2.7143;
}

// 在启用了 JS 点击态时 ( [rl-root] )
// 覆盖禁用 pmd.css 中 :active 背景色
// 实现 touchActive 控制的点击态样式
[rl-root] {
    .c-slink-new,
    .c-slink-new-strong,
    .c-slink-auto {
        &:active {
            background-color: #f5f5f5;
        }
    }

    // 使用 background-color 修复白边问题
    // 叠加 rgba(0, 0, 0, .08) => #e1e1e1
    .c-slink-touchable-active {
        background-color: #e1e1e1;
        &:active {
            background-color: #e1e1e1;
        }
    }
}
</style>
