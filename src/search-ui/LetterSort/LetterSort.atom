<template>
    <transition
        name="letter-sort-slide-fade"
    >
        <div
            a-show="isOpen"
            ref="letterSortWrap"
            :style="{
                top: top ? top : 0,
                bottom: bottom ? bottom : 0,
                paddingBottom: top && !bottom ? top : 0,
                height: bottom ? 'auto' : '100%',
                zIndex: zIndex
            }"
            class="c-letter-sort-wrap"
        >
            <!-- 右侧导航 -->
            <ul
                ref="sideBar"
                :style="{
                    zIndex
                }"
                class="c-letter-sort-sidebar c-font-small c-color-gray"
                @touchstart="moveBarStart($event)"
                @touchmove="moveBar($event)"
                @touchend="moveBarEnd($event)"
                @contextmenu="stopMenu($event)"
            >
                <li
                    a-for="(item, index) in letterData"
                    :ref="sideBarList"
                    :key="index"
                    :data-index="index"
                    :style="{
                        color: currentIndex === index ? isSelectedListColor : defaultColor
                    }"
                    class="c-letter-sort-sidebar-label WA_LOG_BTN"
                    @click="clickBar(index, item.label)"
                >
                    {{ item.label }}
                </li>
            </ul>
            <section
                ref="letterSortContentWrapper"
                class="c-letter-sort-main-content-wrapper"
                @scroll="scrollFn($event)"
            >
                <!-- 内容区 -->
                <div
                    ref="letterSortContent"
                    class="c-letter-sort-main-content"
                >
                    <div
                        a-for="(item, index) in letterData"
                        ref="letterItemDom"
                        :key="index"
                        class="c-letter-sort-main-content-inner"
                    >
                        <!-- 自定义内容区 -->
                        <div a-if="index === 0 && item.isDiy">
                            <!-- @slot 热门区域的自定义内容 -->
                            <slot name="diyContent">
                            </slot>
                        </div>
                        <!-- 主体内容区 -->
                        <div a-else>
                            <div class="c-letter-sort-item-title c-font-small c-color">{{ item.label }}</div>
                            <div class="c-letter-sort-item-list c-font-medium c-color-link">
                                <ul class="c-letter-sort-item-ul">
                                    <li
                                        a-for="(value, key) in item.item"
                                        :key="key"
                                        class="c-gap-inner-top
                                            c-gap-inner-bottom
                                            c-letter-sort-item-list-border
                                            WA_LOG_OTHER
                                        "
                                        @click="clickItem(key,value,index)"
                                    >
                                        <c-touchable-feedback
                                            :left="-.17"
                                            :right="-.17"
                                            :top="-.1"
                                            :bottom="-.1"
                                            background-color="rgba(0,0,0,.05)"
                                        >
                                            <c-link
                                                :url="value.url"
                                                :params="value.params"
                                                class="c-color-link"
                                            >
                                                <!-- @slot 内容区域的列表自定义内容 -->
                                                <slot
                                                    :$index="index"
                                                    :$key="key"
                                                    name="cont"
                                                >
                                                    {{ value.name }}
                                                </slot>
                                            </c-link>
                                        </c-touchable-feedback>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- toast -->
            <c-letter-sort-toast
                :letter-name="letterName"
                :color="color"
                :is-display="isDisplay"
            />
        </div>
    </transition>
</template>
<style scoped lang="less">
.c-letter-sort-wrap {
    position: fixed;
    width: 100%;
    height: 100%;
    background: #fff;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    transform: none;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-touch-callout: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    text-align: left;
}
.c-letter-sort-main-content-wrapper {
    height: 100%;
    overflow-x: hidden;
    overflow-y: scroll;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-overflow-scrolling: touch;
}
.c-letter-sort-main-content {
    width: 100%;
    box-sizing: border-box;
}
.c-letter-sort-sidebar {
    width: 40px;
    position: fixed;
    right: 0;
    top: 50%;
    list-style: none;
    text-indent: 20px;
    transform: translateY(-50%);
    text-align: center;
}
.c-letter-sort-sidebar li {
    height: 18px;
    line-height: 18px;
}
.c-letter-sort-item-title {
    width: 100%;
    height: 24px;
    line-height: 24px;
    text-indent: .17rem;
    background: #f5f5f5;
}
.c-letter-sort-item-ul {
    margin: 0 .17rem;
    list-style: none;
}
.c-letter-sort-item-list-border {
    border-bottom: 1px solid #eee;
    &:last-child {
        border-bottom: none;
    }
}
.letter-sort-slide-fade-enter-active {
    transition: opacity 50ms cubic-bezier(.4, 0, .2, 1);
}
.letter-sort-slide-fade-leave-active {
    transition: opacity 50ms cubic-bezier(.4, 0, .2, 1);
}
.letter-sort-slide-fade-enter,
.letter-sort-slide-fade-leave-to {
    opacity: 0;
}
// 横屏兼容样式
@media screen and (orientation:landscape) {
    .c-letter-sort-sidebar {
        display: none;
    }
}
</style>
<script type="config">
{
    props: {
        /**
         * 内容数据
         *
         * @property {string} label 右侧导航字母
         * @property {Array} item 数据项具体显示内容
         * @property {boolean} isDiy 该数据项是否是自定义内容，目前仅支持一个自定义内容列表项
         * @property {string} item[].name 数据项具体显示的名称
         * @property {string} item[].url 数据项的跳转链接
         * @property {object} item[].params 数据项的跳转链接所需参数，见[Link](./Link#API)
         */
        letterData: {
            type: Array,
            default: [],
            required: true
        },

        /**
         * 自定义字母选中颜色和`Toast`背景颜色
         */
        color: {
            type: String,
            default: 'rgba(0, 0, 0, .8)',
            required: false
        },

        /**
         * 自定义距离浏览器窗口的距离，默认为0，置顶
         */
        top: {
            type: String,
            required: false
        },

        /**
         * 自定义距离浏览器窗口底部的距离，默认为0
         */
        bottom: {
            type: String,
            required: false
        },

        /**
         * 是否显示
         */
        isOpen: {
            type: Boolean,
            default: false,
            required: false
        },

        /**
         * 是否启用字母上下滑动事件，默认关闭，注意（在ios手百滑动偶尔会卡顿，数据量大于150条不建议开启）
         */
        isMove: {
            type: Boolean,
            default: false,
            required: false
        },

        /**
         * 自定义元素CSS中的z-index值
         */
        zIndex: {
            type: String,
            default: '500',
            required: false
        }
    },
    data: {
        letterName: 'A',
        defaultColor: '#999',
        isSelectedListColor: color ? color : '#000',
        isDisplay: false,
        ticking: false,
        // 默认滚动高度
        index: 0,
        timer: null,
        // 当前右侧滚动位置的索引
        currentIndex: -1,
        letterSortContentDom: null,
        letterSortContentWrapperDom: null,
        startY: 0,
        endY: 0,
        distanceY: 0,
        // 列表项的数量
        letterSortContentDomItemLen: 0,
        // 每一个列表项的 top 值
        letterSortContentDomItemOffsetArr: [],
        // transform 完成后的 lastTop 的值
        transformLastTop: 0,
        // 滑动 timeout 数组
        touchmoveTimerArr: [],
        // 主动触发视图更新
        handleUpdateCount: 1,
        // touchmove 轮询器，主要是为了判断当前是否是滑动停止但手指没有抬起的事件
        touchmoveInterval: null,
        // 轮询间隔时间 1s
        touchmoveIntervalTime: 100,
        // 一次 手指停止 到 另一次手指停止 时间间隔内触发的 touchmove 次数
        touchmoveCount: 0,
        isAndroidBaiduApp: false,
        isNew: false
    },
    components: {
        'c-row': '../Row/Row',
        'c-icon': '../Icon/Icon',
        'c-link': '../Link/Link',
        'c-divider': '../Divider/Divider',
        'c-touchable-feedback': '../TouchableFeedback/TouchableFeedback',
        'c-letter-sort-toast': './LetterSortToast'
    }
}
</script>
<script>
export default {
    created() {
        // 初始化raf兼容函数
        this.compatibleRaf();
    },
    mounted() {
        // 初始化获取DOM节点
        this.letterSortContentWrapperDom = this.$refs.letterSortContentWrapper;
        this.letterSortContentDom = this.$refs.letterSortContent;
        this.isAndroidBaiduApp = this.isAndroidBaidu();
        if (!this.letterData.length) {
            this.letterData.length = 0;
        }
        if (this.isOpen) {
            this.getOffsetArr();
        }
    },
    updated() {
        // 仅执行一次，避免每次滚动获取DOM scrollTOP
        if (this.isNew) {
            this.isNew = false;
            this.getOffsetArr();
        }
    },
    watch: {
        // 监听浮层是否显示
        isOpen(newVal, curVal) {
            if (newVal !== curVal) {
                this.isNew = true;
            }
        }
    },
    methods: {
        getOffsetArr() {
            this.letterSortContentDomItemLen = this.letterData.length;
            this.letterSortContentDomItem = this.$refs.letterItemDom;
            this.letterSortContentDomItemOffsetArr = [];
            for (let i = 0; i < this.letterSortContentDomItemLen; i++) {
                // 遍历每个元素距离父级元素的top
                this.letterSortContentDomItemOffsetArr.push(this.letterSortContentDomItem[i].offsetTop);
            }
        },
        stopMenu(event) {
            event.preventDefault();
        },
        // 判断安卓机型
        isAndroidBaidu() {
            let ua = navigator.userAgent.toLowerCase();
            let isAndroid = ua.indexOf('android') > -1;
            return isAndroid;
        },
        compatibleRaf() {
            let lastTime = 0;
            let vendors = ['webkit', 'moz'];
            for (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
                window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
                window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame']
                                                || window[vendors[x] + 'CancelRequestAnimationFrame'];
            }
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = function (callback, element) {
                    let currTime = new Date().getTime();
                    let timeToCall = Math.max(0, 16.7 - (currTime - lastTime));
                    let id = window.setTimeout(function () {
                        callback(currTime + timeToCall);
                    }, timeToCall);
                    lastTime = currTime + timeToCall;
                    return id;
                };
            }
            if (!window.cancelAnimationFrame) {
                window.cancelAnimationFrame = function (id) {
                    clearTimeout(id);
                };
            }
        },
        // 节流函数
        throttle() {
            if (!this.ticking) {
                window.requestAnimationFrame(this.scrollFn);
                this.ticking = true;
            }
            this.scrollFn();
        },
        scrollFn() {
            // 获得当前滚动位置
            let letterSortContentWrapperDomTop = this.letterSortContentWrapperDom.scrollTop;
            let selectIndex = -1;
            // 在数组里遍历找当前滚动位置，及时退出循环
            this.letterSortContentDomItemOffsetArr.forEach((item, index) => {
                if (letterSortContentWrapperDomTop >= item) {
                    selectIndex = index;
                    return;
                }
            });
            // 当不一样才设置index值，节省运算成本
            if (this.currentIndex !== selectIndex) {
                this.currentIndex = selectIndex;
            }
        },
        // 定时关闭Toast
        setTime() {
            let vm = this;
            if (vm.timer) {
                clearTimeout(vm.timer);
                vm.timer = null;
            }
            vm.timer = setTimeout(() => {
                vm.isDisplay = false;
            }, 500);
        },
        // 仅大部分安卓手机支持震动API，震动效果因机型不一致
        shake() {
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }
            else if (navigator.webkitVibrate) {
                navigator.webkitVibrate(50);
            }
        },
        // 抛出事件
        clickItem(key, value, index) {

            /**
             * 列表项点击事件
             *
             * @event clickItem
             * @property {number} param1.listIndex 列表项索引
             * @property {number} param1.itemIndex 列表项子元素的索引
             * @property {object} param1.valueObj 子元素的值
             * @property {boolean} param1.isOpen 组件显示状态
             */
            this.$emit('clickItem', {
                listIndex: index,
                itemIndex: key,
                valueObj: value,
                isOpen: this.isOpen
            });
        },
        // 字母点击事件
        clickBar(index, value) {
            this.setTime();
            this.shake();
            // scrolltop会导致scoll事件,需要异步延迟设置currentIndex
            setTimeout(() => {
                this.currentIndex = index;
            }, 0);
            this.isDisplay = true;
            this.letterName = this.letterData[index].label;
            let letterSortContentDomItem = this.$refs.letterItemDom[index];
            this.letterSortContentWrapperDom.scrollTop = letterSortContentDomItem.offsetTop;

            /**
             * 字母点击事件
             *
             * @event clickLetter
             * @property {number} param1.letterIndex 点击索引
             * @property {object} param1.value 点击元素的值
             */
            this.$emit('clickLetter', {
                letterIndex: index,
                value: value
            });
        },
        // 开始触摸；开始计算移动距离
        moveBarStart(event) {
            let touch = event.targetTouches[0];
            this.startY = touch.pageY;
        },
        // 字母列表touchmove事件
        moveBar(event) {
            if (!this.isMove) {
                return;
            }
            if (this.timer) {
                clearTimeout(this.timer);
                this.timer = null;
            }
            // touchmove 轮询器，主要是为了判断当前是否是滑动停止但手指没有抬起的事件
            if (!this.touchmoveInterval) {
                // 清空touchmove次数
                this.touchmoveCount = 0;
                this.touchmoveInterval = setInterval(() => {
                    if (this.touchmoveCount === 0) {
                        // 触发停止滑动但是手指还没有离开时事件
                        this.handleStopTouchMoveAndStillTouch();
                    }
                    // 清空touchmove次数
                    this.touchmoveCount = 0;
                }, this.touchmoveIntervalTime);
            }
            // 会阻塞主线程
            if (this.isAndroidBaiduApp) {
                this.setTop(event);
            }
            else {
                const timer = setTimeout(() => {
                    this.setTop(event, this.touchmoveCount);
                    // 主动触发视图更新
                    this.handleUpdateCount++;
                }, 0);
                // 维护 timer 数组
                this.touchmoveTimerArr.push(timer);
            }
            event.preventDefault();
        },
        setTop(event, count) {
            let touch = event.changedTouches[0];
            this.endY = touch.pageY;
            // 会阻塞主线程
            let elem = document.elementFromPoint(touch.pageX, touch.pageY);
            if (!(elem && elem.nodeName.toLowerCase() === 'li' && elem.dataset)) {
                return;
            }
            // 如果字母没有改变，则不重新设置 scrollTop
            if (this.index === elem.dataset.index) {
                return;
            }
            // 计算 touchmove 次数
            if (count) {
                this.touchmoveCount++;
            }
            // 展现相应提示
            this.isDisplay = true;
            this.index = elem.dataset.index;
            if (this.index) {
                this.letterName = this.letterData[this.index].label;
                let top = this.$refs.letterItemDom[this.index].offsetTop;
                this.letterSortContentWrapperDom.scrollTop = top;
            }
            this.currentIndex = parseInt(this.index, 10);
        },
        // touchend时关闭提示
        moveBarEnd(event) {
            // 清除轮询器句柄
            if (this.touchmoveInterval) {
                clearInterval(this.touchmoveInterval);
                this.touchmoveInterval = null;
            }
            // 清空异步队列
            this.clearTouchmoveTimerArr();

            this.distanceY = this.endY - this.startY;
            // 判断是否是移动
            if (this.startY !== Math.abs(this.distanceY) && Math.abs(this.distanceY) > 0) {
                this.setTime();
            }

            /**
             * 字母`touchend`事件
             *
             * @event handleTouchEnd
             */
            this.$emit('handleTouchEnd');
        },
        // 清空异步队列
        clearTouchmoveTimerArr() {
            while (this.touchmoveTimerArr.length > 0) {
                let item = this.touchmoveTimerArr[0];
                if (item) {
                    clearTimeout(item);
                    item = null;
                }
                this.touchmoveTimerArr.splice(0, 1);
            }
        },
        // 停止滑动但是手指还没有离开时
        handleStopTouchMoveAndStillTouch() {
            // 清除轮询器句柄
            if (this.touchmoveInterval) {
                clearInterval(this.touchmoveInterval);
                this.touchmoveInterval = null;
            }
            // 清空异步队列
            this.clearTouchmoveTimerArr();
            // 主动触发视图更新
            this.handleUpdateCount++;
        }
    }
};
</script>
