<template>
    <section>
        <!-- 栅格样式，需要通过 JS 判断 -->
        <!-- 由于 5等分 走不了栅格规范，所以这里把它划入自适应范围内 -->
        <section
            a-if="!isAuto && column !== 5"
            class="c-tag-group-grid"
        >
            <!-- 由于华为P10自带浏览器不支持 flex-wrap；这里需要手动判断换行 -->
            <section
                a-for="(item1, index1) in rowNum"
                :key="index1"
                class="c-row c-tag-group"
            >
                <!-- tag 项 -->
                <template a-for="(item, index) in list">
                    <!-- 当当前索引大于等于前一行的最大索引，并且小于当前行的最大索引时才渲染 -->
                    <div
                        a-if="index >= index1 * columnNum && index < (index1 + 1) * columnNum"
                        :key="index"
                        :class="['c-span' + col]"
                        rl-type="stop"
                        class="c-gap-top c-gap-inner-bottom-small c-tap-span"
                    >
                        <!-- 单选 -->
                        <div
                            a-if="type === 'radio'"
                            :class="{
                                'c-tag-selected-radio': item.selected === true,
                                'c-color-gray': item.isNegative === true || disable
                            }"
                            :aria-checked="item.selected"
                            class="c-color c-font-normal c-tag c-gap-inner-left c-gap-inner-right"
                            @click="handleRadioClick(index, $event)"
                        >
                            <!-- 这里加一层 dom 主要是为了防止某些 Android 手机浏览器上边线不显示的问题 -->
                            <!-- 在禁用点击态时不发送 tc 日志 -->
                            <div
                                :class="[
                                    !disable ? 'WA_LOG_BTN' : ''
                                ]"
                                class="c-tag-wrapper c-line-clamp1"
                            >
                                {{ item.text }}
                                <!-- 数字 -->
                                <span a-if="item.number">
                                    <span a-if="item.number <= 999">
                                        ({{ item.number }})
                                    </span>
                                    <span a-else>
                                        (999+)
                                    </span>
                                </span>
                            </div>
                        </div>
                        <!-- 多选 -->
                        <div
                            a-if="type === 'checkbox'"
                            :class="{
                                'c-tag-selected-checkbox': item.selected === true,
                                'c-color-gray': item.isNegative === true || disable
                            }"
                            :aria-checked="item.selected"
                            class="c-color c-font-normal c-tag c-line-clamp1"
                            @click="handleCheckBoxClick(index, $event)"
                        >
                            <div
                                :class="[
                                    !disable ? 'WA_LOG_BTN' : ''
                                ]"
                                class="c-tag-wrapper c-line-clamp1 c-gap-inner-left c-gap-inner-right"
                            >
                                <!-- 只有当被选中时才显示 -->
                                <section a-if="item.selected === true">
                                    <!-- 三角形 -->
                                    <div class="c-tag-checkbox-triangle"/>
                                    <!-- 对勾 -->
                                    <c-icon
                                        class="c-tag-checkbox-check"
                                        type="check"
                                    />
                                </section>
                                <span>{{ item.text }}</span>
                                <!-- 数字 -->
                                <span a-if="item.number">
                                    <span a-if="item.number <= 999">({{ item.number }})</span>
                                    <span a-else>(999+)</span>
                                </span>
                            </div>
                        </div>
                    </div>
                </template>
                <!-- 占位的元素；作用是当list空间不足时占空间；当列表长度不是3的整数时，并且当前行数为最后一行时才出现 -->
                <!-- 判断当前行数为最后一行时这里必须用 == 而不能用 === 否则会出现服务端渲染和前端渲染不一致的问题 -->
                <template a-if="index1 == (rowNum - 1) && (list.length % columnNum) !== 0">
                    <div
                        a-for="(item2, index2) in (columnNum - (list.length % columnNum))"
                        :key="index2"
                        :class="['c-span' + col]"
                    />
                </template>
            </section>
        </section>
        <!-- 自适应样式 -->
        <!-- 这里嵌套多层 dom 是为了匹配 iscroll 的结构 -->
        <section
            a-else
            ref="tagGroupAutoScrollerWrapper"
            :rl-type="allowScroll ? 'stop' : null"
            :class="{
                'c-tag-group-auto-scroller-wrapper': allowScroll,
                'c-tag-group-auto-scroller-wrapper-shadow': allowScroll,
                'c-row-tile': allowScroll
            }"
        >
            <div
                :class="{
                    'c-tag-group-auto-scroller': allowScroll
                }"
                class="c-tag-group-auto-scroller-class"
            >
                <!-- 这里在列数为 5 时需要有一个右侧的负 margin 是为了保证等分还要保证间距 -->
                <div
                    :style="{
                        'margin-right': column === 5 ? '-.05rem' : ''
                    }"
                    :class="{
                        'c-tag-group-auto-list': allowScroll
                    }"
                    class="c-tag-group-auto-list-class"
                >
                    <!-- tag 项 -->
                    <!-- 当 column === 5 时（平分），第五的倍数位不加右侧间距；当 column !== 5 时，最后一位不加右侧间距 -->
                    <!--  column === 5 && (index + 1) % 5 !== 0 -->
                    <div
                        a-for="(item, index) in list"
                        ref="tagGroupAutoScrollerListItem"
                        :key="index"
                        :class="{
                            'c-gap-top': !allowScroll,
                            'c-gap-inner-right-middle': column !== 5 && index !== list.length - 1,
                            'c-gap-inner-right-small': column === 5
                        }"
                        :style="{
                            width: column === 5 ? (100 / column + '%') : 'auto'
                        }"
                        rl-type="stop"
                        class="c-tag-auto-wrapper c-gap-inner-bottom-small"
                    >
                        <!-- eslint-disable atom/max-len -->
                        <!-- 单选 -->
                        <div
                            a-if="type === 'radio'"
                            :class="{
                                'c-tag-selected-radio': item.selected === true,
                                'c-color-gray': item.isNegative === true || disable
                            }"
                            class="c-color c-font-normal c-tag c-line-clamp1 c-tag-auto c-gap-inner-left c-gap-inner-right"
                            @click="handleRadioClick(index, $event)"
                        >
                            <div
                                :class="[
                                    !disable ? 'WA_LOG_BTN' : ''
                                ]"
                                class="c-tag-wrapper c-line-clamp1"
                            >
                                {{ item.text }}
                                <!-- 数字 -->
                                <span a-if="item.number">
                                    <span a-if="item.number <= 999">
                                        ({{ item.number }})
                                    </span>
                                    <span a-else>
                                        (999+)
                                    </span>
                                </span>
                            </div>
                        </div>
                        <!-- 多选 -->
                        <div
                            a-if="type === 'checkbox'"
                            :class="{
                                'c-tag-selected-checkbox': item.selected === true,
                                'c-color-gray': item.isNegative === true || disable
                            }"
                            class="c-color c-font-normal c-tag c-line-clamp1"
                            @click="handleCheckBoxClick(index, $event)"
                        >
                            <div
                                :class="[
                                    !disable ? 'WA_LOG_BTN' : ''
                                ]"
                                class="c-tag-wrapper c-line-clamp1 c-tag-auto c-gap-inner-left c-gap-inner-right"
                            >
                                <!-- 只有当被选中时才显示 -->
                                <section a-if="item.selected === true">
                                    <!-- 三角形 -->
                                    <div class="c-tag-checkbox-triangle"/>
                                    <!-- 对勾 -->
                                    <c-icon
                                        class="c-tag-checkbox-check"
                                        type="check"
                                    />
                                </section>
                                <span>{{ item.text }}</span>
                                <!-- 数字 -->
                                <span a-if="item.number">
                                    <span a-if="item.number <= 999">({{ item.number }})</span>
                                    <span a-else>(999+)</span>
                                </span>
                            </div>
                        </div>
                        <!-- eslint-enable atom/max-len -->
                    </div>
                </div>
            </div>
        </section>
    </section>
</template>

<script type="config">
{
    props: {
        /**
         * 类型；单选 radio；多选 checkbox
         */
        type: {
            type: String,
            default: 'radio'
        },
        /**
         * 数据数组
         * @property {string} text 文案
         * @property {number} number 数量
         * @property {boolean} selected 初始选中状态
         * @property {boolean} isNegative 是否是负向文字
         */
        list: {
            type: Array
        },
        /**
         * 按钮大小是否自适应
         */
        isAuto: {
            type: Boolean,
            default: false
        },
        /**
         * 列数；当5列时较为特殊，不走栅格而是等分
         */
        column: {
            type: Number,
            default: 3
        },
        /**
         * 是否禁用点击交互效果；注：禁用点击效果后点击Tag不会发送tc日志
         */
        disable: {
            type: Boolean,
            default: false
        },
        /**
         * 是否允许 TagGroup 滑动
         */
        allowScroll: {
            type: Boolean,
            default: false
        }
    },
    data: {
        // 上一次选中项的索引
        lastIndex: -1,
        // 栅格数
        col: 12 / column,
        // 列数
        columnNum: column,
        // iScroll 实例
        iScroll: null,
        // 判断是否滚动到了最后
        isScrollToLast: false,
        // 选中项索引数组
        selectedIndexArray: []
    },
    components: {
        'c-icon': '../Icon/Icon'
    }
}
</script>

<script>
/**
 * @file TagGroup 组件；标签组组件，相当于单选和多选；
 * @author wangkai37 <wangkai37@baidu.com>
 */
import IScroll from '@baidu/better-scroll';
// 滑动动画时间
const scrollTime = 500;

export default {
    mounted() {
        const vm = this;
        // 可滑动时
        if (this.allowScroll) {
            const $tagGroupAutoScrollerWrapper = this.$refs.tagGroupAutoScrollerWrapper;
            // 初始化 iScroll；添加 disableMouse: true, disablePointer: true, 否则 pc 上滑动时会卡顿不流畅
            this.iScroll = new IScroll($tagGroupAutoScrollerWrapper, {
                bindToWrapper: true, // 将 touchmove 事件绑定至 dom 而非全局
                scrollX: true,
                scrollY: false,
                click: true,
                disableMouse: true,
                disablePointer: true,
                eventPassthrough: true,
                scrollbars: false
            });
            // 这里是因为：在sf 切换后中display：none情况下，触发resize事件会导致iscroll 触发refresh（），然而此时offsetheight 等取值为零，导致出错
            this.$root.$on('attach', () => {
                this.iScroll.refresh();
            });
            // 监听 scrollEnd 事件
            this.iScroll.on('scrollEnd', () => {

                /**
                 * 当横滑结束时触发，主要用于日志.
                 *
                 * @event scrollEnd
                 */
                vm.$emit('scrollEnd');
            });
            // 计算选中项数组
            if (this.list && this.list.length > 0) {
                this.selectedIndexArray = [];
                this.list.forEach((item, index) => {
                    if (item.selected) {
                        vm.selectedIndexArray.push(index);
                    }
                });
            }
            // 设置默认滚动位置
            if (this.selectedIndexArray.length > 0) {
                // 单选滚动到最后一项
                if (this.type === 'radio') {
                    this.scroll(this.selectedIndexArray[this.selectedIndexArray.length - 1]);
                }
                // 多选滚动到第0项
                else {
                    this.scroll(this.selectedIndexArray[0]);
                }
            }
            else {
                this.scroll(0);
            }
        }
    },
    beforeDestory() {
        // 清空 iScroll 实例
        this.iScroll && this.iScroll.destory();
        this.iScroll = null;
    },
    methods: {
        // 单选按钮点击
        handleRadioClick(index, e) {

            /**
             * 当横滑结束时触发，主要用于日志.
             *
             * @event click
             * @property {object} param1.index 当前点击的项的索引
             * @property {object} param1.e 点击事件
             */
            this.$emit('click', {
                index,
                e
            });
            // 禁用点击态处理
            if (this.disable) {
                return;
            }

            // 可滑动时
            if (this.allowScroll) {
                // 滑动
                this.scroll(index);
                // 判断是否滚动到了最后
                if (index === this.list.length - 1) {
                    this.isScrollToLast = true;
                }
                else {
                    this.isScrollToLast = false;
                }
            }

            const vm = this;
            // 将所有置为未选中
            this.list.forEach(item => {
                vm.$set(item, 'selected', false);
            });
            // 设置选中态
            // 直接操作索引会导致某些情况下不生效，这里修改成对象
            let item = this.list[index];
            item.selected = true;
            vm.list.splice(index, 1, item);
            // vm.$set(this.list, index, item);
            // 如果上一次选中的和这次的不一样
            if (this.lastIndex !== index) {
                // 触发 change 事件
                this.$emit('change', index, {
                    e
                });
            }
            // 保存上一次选中的索引
            this.lastIndex = index;
        },
        // 多选按钮点击
        handleCheckBoxClick(index, e) {

            /**
             * 当横滑结束时触发，主要用于日志.
             *
             * @event click
             * @property {object} param1.index 当前点击的项的索引
             * @property {object} param1.e 点击事件
             */
            this.$emit('click', {
                index,
                e
            });
            // 禁用点击态处理
            if (this.disable) {
                return;
            }
            // 选中态置反，这里要判断一下 selected 是否为 undefined
            // 直接操作索引会导致某些情况下不生效，这里修改成对象
            let item = this.list[index];
            if (item.selected) {
                item.selected = false;
                this.list.splice(index, 1, item);
            }
            else {
                item.selected = true;
                this.list.splice(index, 1, item);

                // 可滑动时
                if (this.allowScroll) {
                    // 滑动；只有当确认的时候才滑动，取消的时候不滑动
                    this.scroll(index);
                    // 判断是否滚动到了最后
                    if (index === this.list.length - 1) {
                        this.isScrollToLast = true;
                    }
                    else {
                        this.isScrollToLast = false;
                    }
                }
            }
            // 选中的下标数组
            const selecteds = [];
            this.list.forEach((item, index) => {
                if (item.selected === true) {
                    selecteds.push(index);
                }
            });

            /**
             * 选项改变后的回调函数；单选返回选中项元素的下标；多选返回选中项元素们的下标数组.
             *
             * @event change
             * @property {} param1 单选：index:Number 选中项元素的下标；多选：selectArr:Array 选中项元素们的下标
             * @property {object} param2.e 点击事件
             */
            this.$emit('change', selecteds, {
                e
            });
        },
        // 滑动到指定位置
        scroll(index) {
            if (index - 1 <= 0) {
                this.iScroll.scrollTo(0, 0, scrollTime);
            }
            else {
                this.iScroll.scrollToElement(this.$refs.tagGroupAutoScrollerListItem[index - 1], scrollTime);
            }
        },

        /**
         * 选项改变后的回调函数 单选返回选中项元素的下标 多选返回选中项元素们的下标数组
         *
         * @event setRadioIndex
         * @param {number} index 单选选中项的索引
         */
        setRadioIndex(index) {
            // 将所有置为未选中
            this.list.forEach(item => {
                this.$set(item, 'selected', false);
            });
            // 设置选中项
            this.$set(this.list[index], 'selected', true);
            // 滚动到指定位置
            this.scroll(index);
            // 保存上一次选中的索引
            this.lastIndex = index;
        }
    },
    watch: {
        list(newVal, oldVal) {
            const vm = this;
            // 计算选中项数组
            if (newVal && newVal.length > 0) {
                vm.selectedIndexArray = [];
                newVal.forEach((item, index) => {
                    if (item.selected) {
                        vm.selectedIndexArray.push(index);
                    }
                });
            }
            if (this.allowScroll) {
                // 这里是为了当 props 改变的时候动态改变 iscroll 的大小
                this.$nextTick(() => {
                    // 更新 iScroll
                    this.iScroll.refresh();
                });
            }
        }
    },
    computed: {
        // 计算行数
        rowNum() {
            return Math.ceil(this.list.length / (12 / this.col));
        }
    }
};
</script>

<script type="php">
    /* 计算行数 */
    function computed_rowNum($ctx) {
        $col = $ctx->_d['col'];
        $list = $ctx->_d['list'];
        return intval(ceil(count($list) / (12 / $col)));
    }
</script>

<style lang="less" scoped>

@content-height: .3rem;

// 栅格样式
.c-tag-group-grid {
    .c-tag-group {
        // 去除 inline-block 上边距的问题
        line-height: 0;
    }
}

// 可滑动 TagGroup
.c-tag-group-auto-scroller-wrapper {
    position: relative;
    overflow: hidden;
    height: @content-height;
}

.c-tag-group-auto-scroller-wrapper-shadow {
    // 这里是为了增加右侧渐变蒙层
    &::after {
        position: absolute;
        top: 0;
        right: 0;
        content: '';
        width: .17rem;
        height: @content-height;
        background: -webkit-linear-gradient(left, rgba(255, 255, 255, 0) , rgba(255, 255, 255, 1));
        background: linear-gradient(to right, rgba(255, 255, 255, 0) , rgba(255, 255, 255, 1));
    }
}

.c-tag-group-auto-scroller-class {
    box-sizing: border-box;
}

.c-tag-group-auto-scroller {
    position: absolute;
    overflow: hidden;
    width: auto;
    height: 100%;
}

.c-tag-group-auto-list {
    position: relative;
    display: flex;
    margin-left: .17rem;
    padding-right: .17rem;
}

.c-tag-group-auto-list-class {
    // 这里是为了去除 inline-block 的上边距
    line-height: 0;
    word-wrap: break-word;
    word-break: break-all;
    white-space: normal;
}

.c-tag-group-auto {
    margin: 0 -.04rem;
    display: block;
}

.c-tag-auto-wrapper {
    display: inline-block;
}

.c-tap-span {
}

.c-tag {
    display: inline-block;
    width: 100%;
    height: .3rem;
    line-height: .3rem;
    text-align: center;
    -webkit-box-shadow: 0 0 0 1px #eee inset;
            box-shadow: 0 0 0 1px #eee inset;
    border-radius: 5px;
    box-sizing: border-box;
    -webkit-tap-highlight-color: transparent;
}

.c-tag-wrapper {
    position: relative;
}

.c-tag-auto {
    display: inline-block;
    width: 100%;
}

.c-tag-selected-radio {
    -webkit-box-shadow: 0 0 0 1px #555 inset;
            box-shadow: 0 0 0 1px #555 inset;
    color: #555;
}

.c-tag-selected-checkbox {
    -webkit-box-shadow: 0 0 0 1px #555 inset;
            box-shadow: 0 0 0 1px #555 inset;
    color: #555;
}

.c-tag-checkbox-triangle {
    position: absolute;
    bottom: 0;
    right: 0;
    border-bottom: .16rem solid #555;
    border-left: .17rem solid transparent;
    box-sizing: border-box;
}

.c-tag-checkbox-check {
    position: absolute;
    display: inline;
    vertical-align: bottom;
    top: .1rem;
    right: .015rem;
    color: #fff;
    font-weight: bold;
    font-size: .07rem;
}

</style>