<template>
    <div>
        <c-transition
            :enter="{
                animations: {
                    fadeIn: {}
                },
                options: {
                    easing: 'cubic-bezier(0.42, 0, 0.52, 1)',
                    duration: 300
                }
            }"
            :leave="{
                animations: {
                    fadeIn: {
                        reverse: true
                    }
                },
                options: {
                    easing: 'cubic-bezier(0, 0, 0.3, 1)',
                    duration: 300
                }
            }"
        >
            <c-mask
                a-show="isShow"
                :top="top"
                :z-index="zIndex"
            />
        </c-transition>
        <c-transition
            :enter="{
                animations: {
                    slideUp: {}
                },
                options: {
                    easing: 'cubic-bezier(0.42, 0, 0.52, 1)',
                    duration: 300
                }
            }"
            :leave="{
                animations: {
                    slideUp: {
                        reverse: true
                    }
                },
                options: {
                    easing: 'cubic-bezier(0.46, 0, 1, 1)',
                    duration: 160
                }
            }"
        >
            <section
                a-show="isShow"
                :style="{
                    'z-index': zIndex,
                    'top': top,
                    'bottom': bottom
                }"
                class="c-calendar"
            >
                <section class="wrapper">
                    <header
                        class="header"
                        @touchmove.prevent
                    >
                        <div
                            a-for="(item, index) in weekStrArr"
                            :key="index"
                            :class="{
                                weekend: index === 0 || index === 6
                            }"
                            class="week-item c-color-link"
                        >
                            {{ item }}
                        </div>
                    </header>
                    <section
                        ref="body"
                        class="body"
                        @touchstart="handleTouchStart"
                        @touchmove="handleTouchMove"
                    >
                        <section
                            ref="bodyScroller"
                            class="body-scroller"
                        >
                            <!-- :key="item.year + '' + item.month" -->
                            <c-calendar-month-item
                                a-for="(item, index) in monthList"
                                ref="calendarMonthItem"
                                :date="item"
                                :cur-date="curDate"
                                :month-index="index"
                                :key="index"
                                :checked-arr="checkedArr"
                                :date-checked-bg-color="dateCheckedBgColor"
                                :date-checked-area-bg-color="dateCheckedAreaBgColor"
                                @dayclick="handleDayClick"
                            />
                        </section>
                    </section>
                    <footer
                        class="footer c-line-top c-line-bottom"
                        @touchmove.prevent
                    >
                        <c-row>
                            <c-span>
                                <c-btn
                                    :style="{
                                        'color': btnColor,
                                        'border-color': btnBorderColor
                                    }"
                                    text="重置"
                                    class="reset WA_LOG_BTN"
                                    @click="handleResetBtnClick"
                                />
                            </c-span>
                            <c-span>
                                <c-btn
                                    :style="{
                                        'background-color': btnFillColor,
                                        'border-color': btnFillColor
                                    }"
                                    text="确定"
                                    class="confirm WA_LOG_BTN"
                                    @click="handleConfirmBtnClick"
                                />
                            </c-span>
                        </c-row>
                    </footer>
                </section>
            </section>
        </c-transition>
    </div>
</template>

<script type="config">
{
    props: {
        /**
         * 是否显示
         */
        isShow: {
            type: Boolean,
            default: false
        },
        /**
         * 日历组件距离顶部的距离 (css fixed top)
         */
        top: {
            type: String,
            default: '0'
        },
        /**
         * 日历组件距离底部的距离 (css fixed top)
         */
        bottom: {
            type: String,
            default: '0'
        },
        /**
         * 日历组件的 z-index 层级
         */
        zIndex: {
            type: Number,
            default: 501
        },
        /**
         * 重置按钮文字颜色
         */
        btnColor: {
            type: String,
            default: '#000'
        },
        /**
         * 重置按钮边框颜色
         */
        btnBorderColor: {
            type: String,
            default: '#707379'
        },
        /**
         * 日历重置按钮填充颜色
         */
        btnFillColor: {
            type: String,
            default: '#555'
        },
        /**
         * 日期选中背景颜色
         */
        dateCheckedBgColor: {
            type: String,
            default: '#3388ff'
        },
        /**
         * 日期选中区域背景颜色
         */
        dateCheckedAreaBgColor: {
            type: String,
            default: 'rgba(51, 136, 255, .1)'
        },
        /**
         * 年，不选则为今天的年份
         */
        year: [Number, String],
        /**
         * 月，不选则为今天的月份
         */
        month: [Number, String],
        /**
         * 日，不选则为今天的日期
         */
        day: [Number, String],
        /**
         * 类型：1 单选日期；2 范围选择
         */
        type: {
            type: Number,
            default: 2
        },
        /**
         * 起始日期的文案；不传则不显示
         */
        startText: String,
        /**
         * 结束日期的文案；不传则不显示
         */
        endText: String,
        /**
         * 范围选择选择同一天的显示文案；不传则不允许选择同一天
         */
        sameDayText: String,
        /**
         * 在当前月份之前要显示的月个数
         */
        beforeMonthNum: {
            type: Number,
            default: 0
        },
        /**
         * 在当前月份之后要显示的月个数
         */
        afterMonthNum: {
            type: Number,
            default: 5
        },
        /**
         * 默认选中项数组；最多两个；
         *
         * @property {number|string} year 年
         * @property {number|string} month 月
         * @property {number|string} day 日
         */
        defaultCheckedArr: {
            type: Array,
            default: []
        }
    },
    data: {
        weekStrArr: ['日', '一', '二', '三', '四', '五', '六'],
        // 闰年月
        monthDayNumArrLeapYear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        // 普通年月
        monthDayNumArrNormalYear: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        // 当前日期
        curDate: {
            year: year,
            month: month,
            day: day,
            timestamp: 0
        },
        // 月列表
        monthList: [],
        // 选中的索引数组
        checkedArr: defaultCheckedArr,
        // body 的高度
        bodyHeight: 0,
        // body scroller 的滚动高度
        bodyScrollerHeight: 0,
        // 滚动阈值
        scrollThreshold: 200,
        // 滚动加载保护
        scrollLoadProtect: false,
        // 滚动到顶部保护
        scrollTopProtect: {
            isProtect: false,
            timeout: null,
            time: 1000
        },
        // 滚动到底部保护
        scrollBottomProtect: {
            isProtect: false,
            timeout: null,
            time: 1000
        },
        // 显示次数
        isShowNum: 0
    },
    components: {
        'c-row': '../Row/Row',
        'c-span': '../Row/Span',
        'c-btn': '../Button/Button',
        'c-calendar-month-item': '../Calendar/CalendarMonthItem',
        'c-transition': '../Motion/Transition',
        'c-mask': '../Calendar/Mask'
    }
}
</script>

<script>
import stopScrollThroughMixin from '../util/stopScrollThroughMixin';

export default {
    mixins: [
        stopScrollThroughMixin
    ],
    mounted() {
        this.init();
    },
    methods: {
        // 初始化
        init() {
            // 初始化月份数组
            this.monthList = [];
            // 初始化默认选中项
            this.checkedArr = JSON.parse(
                JSON.stringify(this.defaultCheckedArr)
            );
            // 初始化显示次数
            this.isShowNum = 0;
            let now = new Date();
            // 如果没有传年月，设置为今天
            // 年
            if (!this.curDate.year) {
                this.curDate.year = now.getFullYear();
            }
            // 月
            if (!this.curDate.month) {
                this.curDate.month = now.getMonth() + 1;
            }
            // 天
            if (!this.curDate.day) {
                this.curDate.day = now.getDate();
            }
            // 时间戳
            if (!this.curDate.timestamp) {
                let date = new Date(`${this.curDate.year}/${this.curDate.month}/${this.curDate.day}`);
                this.curDate.timestamp = date.getTime();
            }
            // 文案不存在且开始文案存在
            if (!this.curDate.text && this.startText) {
                // 设置文案
                this.curDate.text = this.startText;
            }
            // 如果有默认值
            if (this.checkedArr.length > 0) {
                this.checkedArr = this.checkedArr.map((item, index) => {
                    let date = new Date(`${item.year}/${item.month}/${item.day}`);
                    if (!item.dayItem) {
                        item.dayItem = {};
                    }
                    item.dayItem.year = item.year;
                    item.dayItem.month = item.month;
                    item.dayItem.day = item.day;
                    item.dayItem.date = date;
                    item.dayItem.timestamp = date.getTime();
                    return item;
                });
            }
            // 生成 monthList
            this.generateMonthList();
            // 计算判断第一次时选中的区域
            this.monthList.forEach((monthItem, monthIndex) => {
                this.judgeIsInCheckedArea(monthItem);
            });
        },

        /**
         * 组件重置
         *
         * @public
         */
        reset() {
            this.init();
        },
        // 每次显示的时候要做的事
        attach() {
            // 当前的滚动位置项
            this.$nextTick(() => {
                // body 的高度
                this.bodyHeight = this.$refs.body.offsetHeight;
                // body scroller 的高度
                this.bodyScrollerHeight = this.$refs.bodyScroller.offsetHeight;
            });
            // 初始化滚动 top 和滚动 bottom
            this.scrollTop = this.$refs.body.scrollTop;
            this.scrollBottom = this.scrollTop + this.bodyHeight;
        },
        // 每次消失的时候要做的事
        detach() {
        },
        // 生成月份项数组 monthList
        generateMonthList() {
            // 当前项
            let curItem = {
                year: this.curDate.year,
                month: this.curDate.month
            };
            // 放到数组里
            this.monthList = [
                curItem
            ];
            // 添加之前的月份项
            for (let i = 0; i < this.beforeMonthNum; i++) {
                this.addLastMonthItem();
            }
            // 添加之后的月份项
            for (let i = 0; i < this.afterMonthNum; i++) {
                this.addNextMonthItem();
            }
            // 遍历月份
            this.monthList.forEach((monthItem, monthIndex) => {
                monthItem.dayArr = this.generateDayArr(monthItem.year, monthItem.month);
            });
        },
        // 添加上一个月
        addLastMonthItem() {
            // 在前面再插入一个月份
            let item = this.monthList[0];
            let {
                year: lastYear,
                month: lastMonth
            } = item;
            if (lastMonth === 1) {
                lastYear--;
                lastMonth = 12;
            }
            else {
                lastMonth--;
            }
            let lastItem = {
                year: lastYear,
                month: lastMonth
            };
            this.monthList.unshift(lastItem);
        },
        // 添加下一个月
        addNextMonthItem() {
            // 在后面再插入一个月份
            let item = this.monthList[this.monthList.length - 1];
            let {
                year: nextYear,
                month: nextMonth
            } = item;
            if (nextMonth === 12) {
                nextYear++;
                nextMonth = 1;
            }
            else {
                nextMonth++;
            }
            let nextItem = {
                year: nextYear,
                month: nextMonth
            };
            this.monthList.push(nextItem);
        },
        // 生成天数组
        generateDayArr(year, month) {
            let dayArr = [];
            // 得到某个月份的天数
            let monthDayNum = this.getMonthDayNum(year, month);
            for (let i = 0; i < monthDayNum; i++) {
                let obj = {
                    year: year, // 年
                    month: month, // 月
                    day: i + 1 // 天
                };
                obj.dateStr = `${year}/${month}/${obj.day}`; // 日期字符串；注意 iOS 须为 xxxx/xx/xx 这样
                obj.date = new Date(obj.dateStr); // date 对象
                obj.timestamp = obj.date.getTime(); // 时间戳
                obj.weekday = obj.date.getDay(); // 星期
                // 判断是否在默认选中项数组里
                this.judgeIsInDefaultCheckedArr(obj);
                dayArr.push(obj);
            }
            // 第一天不是周日的话，需要补齐
            let firstDayDiff = dayArr[0].weekday;
            let firstDayTimestamp = dayArr[0].timestamp;
            for (let i = firstDayDiff - 1; i >= 0; i--) {
                let obj = {
                    weekday: i,
                    timestamp: firstDayTimestamp - 1 // 这里加时间戳是因为在计算选中区域的时候会根据时间戳计算
                };
                dayArr.unshift(obj);
            }
            // 最后一天不是周六的话，需要补齐
            let lastDayWeekday = dayArr[dayArr.length - 1].weekday;
            let lastDayTimestamp = dayArr[dayArr.length - 1].timestamp;
            for (let i = lastDayWeekday + 1; i < 7; i++) {
                let obj = {
                    weekday: i,
                    timestamp: lastDayTimestamp + 1 // 这里加时间戳是因为在计算选中区域的时候会根据时间戳计算
                };
                dayArr.push(obj);
            }
            return dayArr;
        },
        // 判断是否在默认选中的数组里
        judgeIsInDefaultCheckedArr(dayItem) {
            // 获得选中项长度
            let checkedArrLength = this.checkedArr.length;
            if (!checkedArrLength) {
                return false;
            }
            let isInIndex = -1;
            // 遍历默认选中项数组
            this.checkedArr.forEach((checkedItem, checkedIndex) => {
                // 如果天在默认选中项数组里
                if (checkedItem.dayItem.timestamp === dayItem.timestamp) {
                    isInIndex = checkedIndex;
                    // 设置选中
                    dayItem.checked = true;
                    // 如果长度为 2 并且两个日期相等
                    /* eslint-disable */
                    if (checkedArrLength === 2 && this.checkedArr[0].dayItem.timestamp === this.checkedArr[1].dayItem.timestamp && this.sameDayText) {
                        dayItem.text = this.sameDayText;
                    }
                    /* eslint-enable */
                    // 如果长度为 2 并且是第一个日期
                    else if (checkedArrLength === 2 && checkedIndex === 0) {
                        dayItem.text = this.startText;
                    }
                    // 如果长度为 2 并且是后一个日期
                    else if (checkedArrLength === 2 && checkedIndex === 1) {
                        dayItem.text = this.endText;
                    }
                    // 如果长度为 1
                    else if (checkedArrLength === 1) {
                        dayItem.text = this.startText;
                    }
                    // 赋值
                    checkedItem.dayItem = dayItem;
                }
            });
            return !isInIndex === -1;
        },
        // 判断是否在选择区域内
        judgeIsInCheckedArea(monthItem) {
            // 长度小于 2 时
            if (this.checkedArr.length < 2) {
                monthItem.dayArr.forEach((item, index) => {
                    this.$set(item, 'isInCheckedArea', false);
                    this.$set(item, 'isInCheckedAreaLeft', false);
                    this.$set(item, 'isInCheckedAreaRight', false);
                });
            }
            // 长度等于 2 时
            else if (this.checkedArr.length === 2) {
                let startTimestamp = this.checkedArr[0].dayItem.timestamp;
                let endTimestamp = this.checkedArr[1].dayItem.timestamp;
                // 如果开始结束都是同一天
                if (startTimestamp === endTimestamp) {
                    return;
                }
                monthItem.dayArr.forEach((item, index) => {
                    if (item.timestamp > startTimestamp && item.timestamp < endTimestamp) {
                        this.$set(item, 'isInCheckedArea', true);
                    }
                    else if (item.timestamp === startTimestamp) {
                        this.$set(item, 'isInCheckedAreaRight', true);
                    }
                    else if (item.timestamp === endTimestamp) {
                        this.$set(item, 'isInCheckedAreaLeft', true);
                    }
                    else {
                        this.$set(item, 'isInCheckedArea', false);
                        this.$set(item, 'isInCheckedAreaLeft', false);
                        this.$set(item, 'isInCheckedAreaRight', false);
                    }
                });
            }
        },

        /**
         * 判断是否是闰年
         * 其实只要满足下面几个条件即可：
         * 1.普通年能被4整除且不能被100整除的为闰年。如2004年就是闰年,1900年不是闰年
         * 2.世纪年能被400整除的是闰年。如2000年是闰年，1900年不是闰年
         *
         * @param  {number} year 要判断的年份
         * @return {boolean} isLeapYear 返回布尔值
         */

        isLeapYear(year) {
            return !(year % (year % 100 ? 4 : 400));
        },
        // 得到某个月份的天数
        getMonthDayNum(year, month) {
            let isLeapYear = this.isLeapYear(year);
            if (isLeapYear) {
                return this.monthDayNumArrLeapYear[month - 1];
            }
            return this.monthDayNumArrNormalYear[month - 1];
        },
        // 天点击事件
        handleDayClick(obj) {
            // 不在时间范围内的不选
            if (obj.dayItem.timestamp < this.curDate.timestamp) {
                return;
            }
            // 没有日期对象的不选
            if (!obj.dayItem.date) {
                return;
            }
            // 单选
            if (this.type === 1) {
                this.radioCheck(obj);
            }
            // 范围选择
            else if (this.type === 2) {
                this.rangeCheck(obj);
            }
        },
        // 单选
        radioCheck(obj) {
            let curDay = {};
            // 如果没有上次选中的
            if (this.checkedArr.length === 0) {
                // 当前天
                curDay = {
                    dayItem: obj.dayItem
                };
                // 置为选中态
                this.$set(obj.dayItem, 'checked', true);
                // 设置起始文字
                this.$set(obj.dayItem, 'text', this.startText);
                // 扔到数组里
                this.checkedArr.push(curDay);
            }
            // 如果上次选中的只有一个
            else if (this.checkedArr.length === 1) {
                let lastItem = this.checkedArr[0];
                // 清空
                this.$set(this.checkedArr[0].dayItem, 'checked', false);
                this.$set(this.checkedArr[0].dayItem, 'text', '');
                this.checkedArr.splice(0, 1);

                // 如果不等于，再重新选中；如果相等，就直接删了
                if (lastItem.dayItem.timestamp !== obj.dayItem.timestamp) {
                    // 当前天
                    curDay = {
                        dayItem: obj.dayItem
                    };
                    // 置为选中态
                    this.$set(obj.dayItem, 'checked', true);
                    // 设置起始文字
                    this.$set(obj.dayItem, 'text', this.startText);
                    // 扔到数组里
                    this.checkedArr.push(curDay);
                }
            }

            /**
             * 点击有效日期项的时候触发
             *
             * @event change
             * @property {object} param1 点选日期的信息对象
             * @property {Date} param1.date 日期对象
             * @property {string} param1.text 日期显示文案
             * @property {number} param1.year 日期年份
             * @property {number} param1.month 日期月份
             * @property {number} param1.day 日期天数
             * @property {number} param1.weekday 日期星期数
             * @property {number} param1.timestamp 日期时间戳
             * @property {number} param1.type 组件类型
             */
            this.$emit('change', {
                type: this.type,
                date: obj.dayItem.date,
                year: obj.dayItem.year,
                month: obj.dayItem.month,
                text: obj.dayItem.text,
                day: obj.dayItem.day,
                timestamp: obj.dayItem.timestamp,
                weekday: obj.dayItem.weekday
            });
        },
        // 范围 check
        rangeCheck(obj) {
            let curDay = {};
            // 如果没有上次选中的
            if (this.checkedArr.length === 0) {
                // 当前天
                curDay = {
                    dayItem: obj.dayItem
                };
                // 置为选中态
                this.$set(obj.dayItem, 'checked', true);
                // 设置起始文字
                this.$set(obj.dayItem, 'text', this.startText);
                // 扔到数组里
                this.checkedArr.push(curDay);
            }
            // 如果上次选中的只有一个
            else if (this.checkedArr.length === 1) {
                // 之前的选中天
                let previousDay = this.checkedArr[0];
                // 当前天
                curDay = {
                    dayItem: obj.dayItem
                };
                // 置为选中态
                this.$set(obj.dayItem, 'checked', true);
                // 如果当前天时间晚于之前天
                if (curDay.dayItem.timestamp > previousDay.dayItem.timestamp) {
                    // 放到后头
                    this.checkedArr.push(curDay);
                    this.$set(obj.dayItem, 'text', this.endText);
                    this.$set(previousDay.dayItem, 'text', this.startText);
                }
                // 选择了同一天并且 sameDayText 存在
                else if (curDay.dayItem.timestamp === previousDay.dayItem.timestamp && this.sameDayText) {
                    this.$set(this.checkedArr[0].dayItem, 'text', this.sameDayText);
                    this.checkedArr.push(curDay);
                }
                // 选择了同一天但是 sameDayText 不存在
                else if (curDay.dayItem.timestamp === previousDay.dayItem.timestamp && !this.sameDayText) {
                    // console.log('不能选择同一天');
                }
                else {
                    // 放到前头
                    this.checkedArr.unshift(curDay);
                    this.$set(obj.dayItem, 'text', this.startText);
                    this.$set(previousDay.dayItem, 'text', this.endText);
                }
            }
            // 如果上次选中的有两个
            else if (this.checkedArr.length === 2) {
                // 如果两个是同一天，并且当前的点击项也是这一天
                /* eslint-disable */
                if (this.checkedArr[0].dayItem.timestamp === this.checkedArr[1].dayItem.timestamp && this.checkedArr[0].dayItem.timestamp === obj.dayItem.timestamp) {
                    this.$set(this.checkedArr[1].dayItem, 'checked', false);
                    this.$set(this.checkedArr[1].dayItem, 'text', '');
                    this.$set(this.checkedArr[0].dayItem, 'checked', false);
                    this.$set(this.checkedArr[0].dayItem, 'text', '');
                    this.checkedArr.splice(0, 2);
                }
                /* eslint-enable */
                // 如果两个不是同一天
                else {
                    // 当前天
                    curDay = {
                        dayItem: obj.dayItem
                    };
                    // 是否之前就存在的标志索引
                    let inBeforeIndex = -1;
                    // 遍历之前的
                    this.checkedArr.forEach((item, index) => {
                        // 如果时间戳有相等的
                        if (item.dayItem.timestamp === curDay.dayItem.timestamp) {
                            // 说明之前就存在
                            inBeforeIndex = index;
                            // 置为未选中态
                            this.$set(item.dayItem, 'checked', false);
                            this.$set(item.dayItem, 'text', '');
                        }
                    });
                    // 如果等于 -1，说明新的选项在之前的选项里
                    if (inBeforeIndex !== -1) {
                        // 从原数组中删除
                        this.checkedArr.splice(inBeforeIndex, 1);
                    }
                    // 如果等于 -1，说明新的选项不是之前的选项，清空数组，重新选择
                    else if (inBeforeIndex === -1) {
                        this.checkedArr.forEach((item, index) => {
                            // 置为未选中态
                            this.$set(item.dayItem, 'checked', false);
                            this.$set(item.dayItem, 'text', '');
                        });
                        // 清空为空数组
                        this.checkedArr = [];
                        // 当前天
                        curDay = {
                            dayItem: obj.dayItem
                        };
                        // 置为选中态
                        this.$set(obj.dayItem, 'checked', true);
                        this.$set(obj.dayItem, 'text', this.startText);
                        // 放入数组里
                        this.checkedArr.push(curDay);
                    }
                }
            }
            // 触发 change 事件
            this.$emit('change', {
                type: this.type,
                date: obj.dayItem.date,
                year: obj.dayItem.year,
                month: obj.dayItem.month,
                text: obj.dayItem.text,
                day: obj.dayItem.day,
                timestamp: obj.dayItem.timestamp,
                weekday: obj.dayItem.weekday
            });
        },
        // 重置
        handleResetBtnClick() {
            this.checkedArr.forEach((item, index) => {
                // 清空
                this.$set(item.dayItem, 'checked', false);
                this.$set(item.dayItem, 'text', '');
            });
            this.checkedArr = [];

            /**
             * 重置按钮点击时触发
             *
             * @event reset
             */
            this.$emit('reset');
        },
        // 确定
        handleConfirmBtnClick() {

            this.$emit('close');
            let arr = [];
            this.checkedArr.forEach((item, index) => {
                let obj = {
                    type: this.type,
                    date: item.dayItem.date,
                    year: item.dayItem.year,
                    month: item.dayItem.month,
                    day: item.dayItem.day,
                    weekday: item.dayItem.weekday,
                    timestamp: item.dayItem.timestamp,
                    text: item.dayItem.text
                };
                arr.push(obj);
            });

            /**
             * 确认按钮点击时触发
             *
             * @event confirm
             * @property {Array<object>} param1.selectedArr 为选中的日期数组(数组长度为 0 时代表没有选中项；长度为 1 时代表只选择了一个日期；长度为 2 时代表选择了两个日期，有先后顺序)
             * @property {Date} param1.selectedArr[].date 日期对象
             * @property {string} param1.selectedArr[].text 日期显示文案
             * @property {number} param1.selectedArr[].year 日期年份
             * @property {number} param1.selectedArr[].month 日期月份
             * @property {number} param1.selectedArr[].day 日期天数
             * @property {number} param1.selectedArr[].weekday 日期星期数
             * @property {number} param1.selectedArr[].timestamp 日期时间戳
             * @property {number} param1.selectedArr[].type 组件类型
             */
            this.$emit('confirm', {
                selectedArr: arr
            });
        },
        // 阻止滚动穿透
        handleTouchStart(e) {
            this.handleTouchStartStopScrollThroughMixin(e);
        },
        handleTouchMove(e) {
            this.handleTouchMoveStopScrollThroughMixin(e, this.$refs.body);
        }
    },
    watch: {
        isShow(newVal, oldVal) {
            if (newVal) {
                this.isShowNum++;
                this.attach();
            }
            else {
                this.detach();
            }
        },
        defaultCheckedArr(newVal, oldVal) {
            this.init();
        }
    }
};
</script>

<style lang="less" scoped>
.c-calendar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: #fff;
    .wrapper {
        position: relative;
        height: 100%;
        .header {
            position: absolute;
            display: flex;
            align-items: center;
            padding: 0 .17rem;
            height: 38px;
            background: #f5f5f5;
            left: 0;
            right: 0;
            top: 0;
            .week-item {
                flex: 1;
                width: 100%;
                text-align: center;
            }
            .weekend {
                color: #3388ff;
            }
        }
        .body {
            position: absolute;
            top: 38px;
            left: 0;
            right: 0;
            bottom: .68rem;
            overflow: scroll;
            // iOS 弹性滚动
            -webkit-overflow-scrolling: touch;
        }
        .footer {
            position: absolute;
            padding: .1rem .17rem;
            left: 0;
            right: 0;
            bottom: 0;
            box-sizing: border-box;
            background: #fff;
            .reset {
            }
            .confirm {
                color: #fff;
            }
        }
    }
}
</style>
