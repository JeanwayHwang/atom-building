<template>
    <div class="container">
        <div
            ref="switchBox"
            :class="[
                innerValue ? $style.on : '',
                showMotion ? $style.transit : ''
            ]"
            :aria-checked="innerValue"
            class="main WA_LOG_BTN"
            role="checkbox"
            @touchstart="onTouch"
            @touchmove="onDrag"
            @touchend="onDrop"
        >
            <div ref="slider" class="slider">&nbsp;</div>
            <div ref="shadow" class="shadow">&nbsp;</div>
        </div>
    </div>
</template>

<script type="config">
{
    props: {
        /**
         * 开关状态值
         */
        value: {
            type: Boolean,
            required: true
        },

        /**
         * 是否开启动效
         */
        transition: {
            type: Boolean,
            default: true
        }
    },
    data: {
        innerValue: value,
        showMotion: true,
        dragStartX: 0,
        dragDistanceX: 0,
        dragProgress: 0,
        dragValue: false
    }
}
</script>

<script>
/**
 * @file switch
 * @author toxni <liyuhang01@baidu.com>
 */

export default {
    beforeUpdate() {
        this.showMotion = this.transition;
    },
    methods: {
        xor(a, b) {
            return !!a !== !!b;
        },
        onSwitch() {
            this.showMotion = this.transition;
            this.changeShadowTrans(this.innerValue);
            this.innerValue = !this.innerValue;

            /**
             * 点击切换
             *
             * @event change
             * @property {string} param1 当前开关value
             */
            this.$emit('change', this.innerValue);
        },
        onTouch(e) {
            this.dragStartX = e.targetTouches[0].clientX;
        },
        onDrag(e) {
            e.preventDefault();
            this.showMotion = false;
            let dragDistanceX = e.targetTouches[0].clientX - this.dragStartX;
            let dragDirection = dragDistanceX > 0;
            if (this.innerValue) {
                dragDistanceX = dragDistanceX + 16;
            }
            else {
                dragDistanceX = dragDistanceX;
            }

            dragDistanceX = (dragDirection && dragDistanceX >= 18) ? 18 - 4.5 : dragDistanceX;
            dragDistanceX = (!dragDirection && dragDistanceX <= 1) ? 1 : dragDistanceX;
            dragDistanceX = dragDistanceX.toFixed(2);

            let dragProgress = (this.innerValue ? 1 - (dragDistanceX / 18) : (dragDistanceX / 18)).toFixed(2);
            let dragValue = this.xor(this.innerValue, dragProgress > 0.5);

            let slider = this.$refs.slider;
            let shadow = this.$refs.shadow;
            let switchBox = this.$refs.switchBox;

            slider.style.transition = '0.3s';
            slider.style.left = dragDistanceX - 1.5 + 'px';
            slider.style.width = '24px';
            shadow.style.transition = 'transform 0.18s ease 0s';
            shadow.style.transform = 'scale(0)';
            shadow.style.transition = '';
            switchBox.style.background = dragValue ? '#38f' : '#e5e5e5';
            switchBox.style.borderColor = dragValue ? '#38f' : 'transparent';

            this.dragDistanceX = dragDistanceX;
            this.dragProgress = dragProgress;
            this.dragValue = dragValue;
        },
        onDrop(e) {
            if (!this.dragDistanceX) {
                this.onSwitch();
                return void 0;
            }
            let slider = this.$refs.slider;
            let shadow = this.$refs.shadow;
            let switchBox = this.$refs.switchBox;

            slider.style.left = '';
            slider.style.transition = 'left 0.18s ease 0s, width 0.18s ease 0s';
            slider.style.width = '';
            shadow.style.transform = '';
            switchBox.style.background = '';
            switchBox.style.borderColor = '';
            this.showMotion = true;

            if (this.innerValue !== this.dragValue) {
                this.innerValue = this.dragValue;
                this.$emit('change', this.innerValue);
            }

            this.dragStartX = 0;
            this.dragDistanceX = 0;
            this.dragProgress = 0;

            setTimeout(() => {
                slider.style.transition = '';
            }, 180);
        },
        changeShadowTrans(bool) {
            if (!this.transition) {
                return void 0;
            }
            let shadow = this.$refs.shadow;
            shadow.style.transition
                = this.innerValue
                ? 'transform 0.6s cubic-bezier(0.28, 0.38, 0.4, 1) 0s'
                : 'transform 0.3s cubic-bezier(0.28, 0.38, 0.4, 1) 0s';
        }
    },
    watch: {
        value(n) {
            if (this.innerValue !== n) {
                this.changeShadowTrans(n);
                this.innerValue = n;
                this.$emit('change', this.innerValue);
            }
        }
    }
};
</script>

<style module lang=less>
    /*
        NOTE: switch 组件尺寸全部使用 px 不使用 rem
        因为小安卓机上 rem 单位的 border-radius: 50% 无法显示出正圆
    */

    .container {
        display: inline-block
    }

    .main {
        width: 38px;
        height: 22px;
        border-radius: 11px;
        position: relative;
        background-color: #e5e5e5;
        box-sizing: border-box;
        border: 1px solid transparent;
        user-select: none;

        .slider {
            position: absolute;
            width: 20px;
            height: 20px;
            left: -0.5px;
            top: 0;
            background: #fff;
            border-radius: 10px;
            box-sizing: border-box;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            z-index: 3;
        }

        .shadow {
            position: absolute;
            top: -1px;
            left: -1px;
            width: 38px;
            height: 22px;
            border-radius: 11px;
            background: #fff;
            box-sizing: border-box;
            border: 1px solid #e5e5e5;
            transform-origin: 50% 50%;
            transform: scale(1);
            z-index: 1;
        }

        .shadow-half {
            position: absolute;
            top: -1px;
            left: -1px;
            width: 22px;
            height: 22px;
            border-radius: 11px;
            box-sizing: border-box;
            border: 1px solid transparent;
            z-index: 2;
        }
    }

    .transit {
        transition: background-color .22s ease 0s, border-color .22s ease 0s;
        .slider {
            transition: left .3s cubic-bezier(.25, 0, .6, 1.3) 0s;
        }

        .shadow-transit {
            transition: transform .25s cubic-bezier(.28, .38, .4, 1) 0s;
        }
    }

    .on {
        background-color: #38f;
        border-color: #38f;

        .slider {
            background: #fff;
            border-radius: 10px;
            left: 15.5px;
        }

        .shadow {
            transform: scale(0);
        }
    }
</style>
