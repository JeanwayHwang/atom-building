<template>
    <div
        data-module="c-vis"
    >
        <c-base
            a-if="isShowBase"
            ref="base"
            :list="list"
            :start-index="startIndex"
            :image-clip-type="imageClipType"
            @before-enter="onBeforeEnter"
            @before-leave="onBeforeLeave"
            @after-leave="onAfterLeave"
            @switch="onSwitch"
            @tap="onTap"
            @swipe-down-start="onSwipeDownStart"
            @swipe-down-cancel="onSwipeDownCancel"
        >
            <!-- 功能区 -->
            <template slot="feature">
                <toolbar
                    a-if="!hidePageNum || !hideSaveButton"
                    a-show="isShowToolbar"
                    :index="currentIndex"
                    :count="total"
                    :hide-page-num="hidePageNum"
                    :hide-save-button="hideSaveButton"
                    @save-click="onSaveClick"
                />
            </template>
        </c-base>
    </div>
</template>

<script type="config">
    {
        props: {
            hidePageNum: {
                type: Boolean,
                default: false
            },
            hideSaveButton: {
                type: Boolean,
                default: false
            },
            imageClip: {
                type: Number,
                default: 0
            }
        },
        data: {
            list: [],
            total: 0,
            startIndex: 0,
            currentIndex: 0,
            currentData: null,
            isOpen: false,
            isShowBase: false,
            isShowToolbar: true,
            isTotalGiven: false,
            naId: '1',
            position: {},
            // 全局回调函数
            windowCallbacks: [],
            // 手百端能力暂时降级
            disableBaiduNA: true,
            imageClipType: 'none'
        },
        components: {
            'c-base': './Base',
            'toolbar': './Toolbar'
        }
    }
</script>

<script>
    /**
     * @file 图片查看器
     * @author rongweiwei@baidu.com
     * @author liuhuan17@baidu.com
     */
    import Promise from '@searchfe/promise';
    import ua from '@searchfe/user-agent';
    import versionCompare from 'versions-compare';

    // 裁剪类型
    const ClipType = {
        0: 'other',
        1: 'none',
        2: 'center',
        3: 'top center'
    };

    // 其他剪裁类型
    const OTHER_CLIP = 0;

    // NA 裁剪类型
    const NaClipType = {
        0: 'none',
        1: 'none',
        2: 'none',
        3: 'clipping'
    };

    // NA 退场动画
    const NaExitAnimation = {
        0: 'fade',
        1: 'scale',
        2: 'scale',
        3: 'scale'
    };

    // NA图片查看器调起错误
    const OpenNaError = {
        errCode: 1001,
        errMsg: '大图NA_调起过于频繁'
    };

    // 客户端类型 0: h5 1: 手百 2: 简搜
    const Client = ua.isBaiduBox() ? 1 : ua.isSearchCraft() ? 2 : 0;

    // 简搜支持剪裁的版本
    const SECR_CLIP_VERSION = '2.13.0';

    export default {
        mounted() {
            // 兼容业务方手动改变disableBaiduNA 强制调起老的feed图片查看器场景
            this.disableBaiduNA = !this.isNeedBoxOpen();
            // pc 不加载 @baidu/view-image 库
            if (this.$platform !== 'pc') {
                /* eslint-disable fecs-no-require */
                require(['@baidu/view-image'], ViewImage => {
                    this.ViewImage = ViewImage;
                });
                /* eslint-enable fecs-no-require */
            }
        },

        beforeDestroy() {
            this.clearWindowCallbacks();
            this.clearTimers();
        },

        methods: {
            // 函数接口
            open({list, startIndex = 0, total = 0, el = null}) {
                if (!list || !list.length || !list[0].src) {
                    return false;
                }

                this.isOpen = true;
                this.startIndex = startIndex;
                this.currentIndex = startIndex;
                this.position = {
                    index: startIndex,
                    el
                };

                // 调用者明确设置了total
                this.isTotalGiven = total > 0;
                this.total = this.isTotalGiven ? total : list.length;

                // 复制数组，隔离外界影响
                this.list = list.slice(0, this.total);

                // 给图片对象增加默认属性
                this.setListProperties(this.list);

                // 判断图片裁剪方式
                this.imageClipType = ClipType[this.imageClip] || ClipType[OTHER_CLIP];
                if (ua.isBaiduBox() && !this.disableBaiduNA || Client === 2) {
                    this.openNA().catch(error => {
                        // 避免快速点击重复调起端上大图
                        let isReopenError = (error && +error.errCode === OpenNaError.errCode
                            && (error.errMsg === OpenNaError.errMsg));
                        if (!isReopenError) {
                            this.openBase();
                        }
                    });
                }
                else {
                    this.openBase();
                }

                return true;
            },
            isNeedBoxOpen() {
                return ua.isBaiduBox() && versionCompare(ua.baiduBoxVersion(), [11, 11]) >= 0;
            },
            setPosition({index, el = null}) {
                if (typeof index !== 'number' || !el) {
                    return false;
                }

                if (this.isShowBase) {
                    this.setBasePosition(index, el);
                }
                else {
                    this.setNAPosition(index, el);
                }

                return true;
            },
            append({list}) {
                if (!list || !list.length || !list[0].src) {
                    return false;
                }

                // 调用者明确设置了total
                if (this.isTotalGiven) {
                    // 列表数据已满
                    if (this.list.length >= this.total) {
                        return false;
                    }

                    // 保证不超出total大小
                    if (this.list.length + list.length > this.total) {
                        list = list.slice(0, this.total - this.list.length);
                    }
                }
                else {
                    this.total = this.list.length + list.length;
                }

                // 给图片对象增加默认属性
                this.setListProperties(list);

                if (this.isShowBase) {
                    this.appendToBase(list);
                }
                else {
                    this.appendToNA(list);
                }

                return true;
            },
            close() {
                if (this.isOpen && this.isShowBase) {
                    this.$refs.base.triggerLeaveEvent({
                        type: 'close'
                    });

                    this.isOpen = false;
                    return true;
                }

                return false;
            },

            // 事件接口
            onSwitch({index, data, forceEmit = false}) {
                let lastIndex = this.currentIndex;

                this.currentIndex = index;
                this.currentData = data;

                // 防止重复发事件
                if (lastIndex !== index || forceEmit) {
                    this.$emit('switch', {index, data});
                }
            },
            onSaveClick() {
                this.$refs.base.showToast('请长按图片保存');
            },

            // 以下函数是内部逻辑
            // NA调用
            openNA() {
                let list = this.list.map(item => {
                    return {
                        url: item.src,
                        thumbnailUrl: item.thumbnail,
                        imageWidth: item.width,
                        imageHeight: item.height
                    };
                });
                let total = this.total;
                let startIndex = this.startIndex;
                let el = this.position.el;
                let previewRect = [0, 0, 0, 0];
                let previewBase64 = '';

                const open = (resolve, reject) => {
                    this.callViewImageOpen(
                        list,
                        total,
                        startIndex,
                        previewRect,
                        previewBase64
                    ).then(res => {
                        resolve(res);

                        // 调起后发翻页事件
                        this.emitSwitchTimer = setTimeout(() => {
                            this.onSwitch({
                                index: this.currentIndex,
                                data: this.list[this.currentIndex],
                                forceEmit: true
                            });
                        }, 100);
                    }).catch(error => {
                        reject(error);
                    });
                };

                return new Promise((resolve, reject) => {
                    if (el && el.getBoundingClientRect) {
                        this.ViewImage.imgToBase64(list[startIndex].url).then(imgBase64 => {
                            previewRect = this.getElRect(el, true);
                            previewBase64 = imgBase64;
                            open(resolve, reject);
                        }).catch(error => {
                            open(resolve, reject);
                        });
                    }
                    else {
                        open(resolve, reject);
                    }
                });
            },
            callViewImageOpen(list, total, startIndex, previewRect, previewBase64) {
                // 清除之前的回调函数
                this.clearWindowCallbacks();

                // 每次重新生成id
                this.naId = '' + +new Date();

                // 注册全局函数给NA调用
                const swipeCallback = 'image_viewer_simple_swipe_' + this.naId;
                const closeCallback = 'image_viewer_simple_close_' + this.naId;

                this.addWindowCallback(swipeCallback, res => {
                    let index = Client === 2 ? res.data.cur_index : res.data.curIndex;
                    this.onSwitch({
                        index,
                        data: this.list[index]
                    });
                });

                this.addWindowCallback(closeCallback, res => {
                    this.clearWindowCallbacks();
                    this.onClose();
                });

                // 设置图片裁剪类型
                let naClip = NaClipType[OTHER_CLIP];
                let exitAnimation = NaExitAnimation[OTHER_CLIP];

                // 判断 简搜 2.13.0 版本或者手百 11.11 版本
                if (Client === 2 && versionCompare(ua.secrVersion(), SECR_CLIP_VERSION.split('.')) >= 0
                    || this.isNeedBoxOpen()) {
                    naClip = NaClipType[this.imageClip] || NaClipType[OTHER_CLIP];
                    exitAnimation = NaExitAnimation[this.imageClip] || NaExitAnimation[OTHER_CLIP];

                    list.forEach((item, i) => {
                        item.exitClipping = naClip;
                        item.exitClippingInfo = this.ViewImage.getClippingInfo({
                            imageWidth: this.list[i] && this.list[i].width,
                            imageHeight: this.list[i] && this.list[i].height,
                            el: this.position.el,
                            imageClip: this.imageClip
                        });
                    });
                }

                const options = {
                    id: this.naId,
                    imagesList: list,
                    source: 'search-ui',
                    index: startIndex,
                    startIndex: 0,
                    endIndex: list.length - 1,
                    totalCount: total,
                    entranceAnimation: previewBase64 ? 'scale' : 'none',
                    exitAnimation,
                    previewRect,
                    currentImageBase64: previewBase64,
                    swipeCallback,
                    closeCallback,
                    isShowPageIndex: !this.hidePageNum ? '1' : '0'
                };

                return new Promise((resolve, reject) => {
                    this.ViewImage.open(options).then(res => {
                        resolve(res);
                    }).catch(error => {
                        this.clearWindowCallbacks();
                        reject(error);
                    });
                });
            },
            setNAPosition(index, el) {
                const options = {
                    id: this.naId,
                    index,
                    previewRect: this.getElRect(el, true),
                    exitClippingInfo: this.ViewImage.getClippingInfo({
                        imageWidth: this.list[index] && this.list[index].width,
                        imageHeight: this.list[index] && this.list[index].height,
                        el: el,
                        imageClip: this.imageClip
                    })
                };

                this.ViewImage.position(options);
            },
            getElRect(el, needRound) {
                let rect = el && el.getBoundingClientRect
                    ? el.getBoundingClientRect()
                    : {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };

                return needRound
                    ? [
                        Math.round(rect.left),
                        Math.round(rect.top),
                        Math.round(rect.width),
                        Math.round(rect.height)
                    ]
                    : [
                        rect.left,
                        rect.top,
                        rect.width,
                        rect.height
                    ];
            },
            appendToNA(list) {
                this.list.splice(this.list.length, 0, ...list);

                list = list.map(item => {
                    return {
                        url: item.src,
                        thumbnailUrl: item.thumbnail,
                        imageWidth: item.width,
                        imageHeight: item.height
                    };
                });

                const options = {
                    id: this.naId,
                    imagesList: list,
                    totalCount: this.total
                };

                this.ViewImage.append(options);
            },
            setListProperties(list) {
                list.forEach(item => {
                    if (!item.thumbnail) {
                        item.thumbnail = '';
                    }
                    if (!item.width || item.width < 10) {
                        item.width = 0;
                    }
                    if (!item.height || item.height < 10) {
                        item.height = 0;
                    }
                });
            },
            addWindowCallback(name, func) {
                window[name] = func;
                this.windowCallbacks.push(name);
            },
            clearWindowCallbacks() {
                this.windowCallbacks.forEach(name => {
                    window[name] = null;
                });
                this.windowCallbacks = [];
            },
            clearTimers() {
                if (this.emitSwitchTimer) {
                    clearTimeout(this.emitSwitchTimer);
                    this.emitSwitchTimer = null;
                }
            },

            // atom组件调用
            openBase() {
                this.isShowBase = true;

                // 调起后发翻页事件
                this.$nextTick(() => {
                    this.onSwitch({
                        index: this.currentIndex,
                        data: this.list[this.currentIndex],
                        forceEmit: true
                    });
                });
            },
            setBasePosition(index, el) {
                this.position = {
                    index,
                    el
                };
            },
            appendToBase(list) {
                // 属性变更会直接反映到组件内部
                this.list.splice(this.list.length, 0, ...list);
            },

            // atom组件事件处理
            onBeforeEnter({index}, animate) {
                if (index === this.position.index && typeof animate === 'function') {
                    animate(this.position.el);
                }
            },
            onBeforeLeave({index}, animate) {
                if (this.imageClipType !== ClipType[OTHER_CLIP]) {
                    // 图片落坑
                    if (index === this.position.index && typeof animate === 'function') {
                        animate(this.position.el);
                    }
                }

                // 工具栏隐藏
                this.isShowToolbar = false;
            },
            onAfterLeave() {
                if (this.isShowBase) {
                    this.isShowBase = false;
                }
                this.isShowToolbar = true;
                this.onClose();
            },
            onTap() {
                this.$refs.base.triggerLeaveEvent({
                    type: 'tap'
                });
            },
            onSwipeDownStart() {
                this.isShowToolbar = false;
            },
            onSwipeDownCancel() {
                this.isShowToolbar = true;
            },
            onClose() {
                this.isOpen = false;
                this.$emit('close', {
                    index: this.currentIndex,
                    data: this.list[this.currentIndex]
                });
            }
        }
    };
</script>