<template>
    <!-- 无限下拉 -->
    <div class="c-infinite-scroll">
        <!-- 顶部 bar -->
        <div
            :style="{
                height: topHeight + 'px'
            }"
            class="c-infinite-scroll-topbar c-infinite-scroll-animating"
        />
        <!-- @slot 内容区 -->
        <slot/>
        <!-- type === 'click' 点击加载按钮栏 -->
        <div
            a-if="mode === 'click'"
            a-show="status === 0"
            @click="load"
        >
            <!--手动加载按钮-->
            <c-spread-bottom-btn
                a-if="loadBtnShow"
                :log-class="logClass"
                :spread-text="loadBtnText"
            />
            <slot name="loadBtnSlot"/>
        </div>
        <!-- 底部 bar -->
        <c-infinite-scroll-bottom-bar
            a-if="mode === 'scroll'
                ||
                (mode === 'click' && status !== 0)
            "
            :status="status"
            :loading-text="loadingText"
            :load-end-text="loadEndText"
            :load-fail-text="loadFailText"
            :bg-color="bottomOpts && bottomOpts.bgColor"
            :icon-color="bottomOpts && bottomOpts.iconColor"
            :text-color="bottomOpts && bottomOpts.textColor"
            :row-tile="bottomOpts && bottomOpts.rowTile"
            @click="reload"
        />
    </div>
</template>

<script type="config">
{
    props: {

        /**
         * 缺省图&加载图类型（见示例）
         */
        pageNum: {
            type: Number,
            default: 0
        },

        /**
         * 加载中文本
         */
        loadingText: {
            type: String,
            default: '正在加载...'
        },

        /**
         * 加载到尾部文本
         */
        loadEndText: {
            type: String,
            default: '到底了 没有更多内容了'
        },

        /**
         * 加载失败文本
         */
        loadFailText: {
            type: String,
            default: '加载失败 点击重新加载'
        },

        /**
         * 滚动位置和文档底部的距离，小于这个距离时触发加载新数据
         */
        bufferHeightPx: {
            type: Number,
            default: 10
        },

        /**
         * 触发模式：'scroll' 滚动到底部触发；'click' 点击按钮触发
         */
        mode: {
            type: String,
            default: 'scroll'
        },

        /**
         * 是否显示加载按钮
         */
        loadBtnShow: {
            type: Boolean,
            default: true
        },

        /**
         * 加载按钮文案
         */
        loadBtnText: {
            type: String,
            default: '展开更多'
        },

        /**
         * 是否增加日志类
         */
        logClass: {
            type: Boolean,
            default: true
        },

        /**
         * 底部按钮配置
         */
        bottomOpts: {
            type: Object
        },

        /**
         * 是否在 mounted 时进行自动加载，默认自动加载；
         * 如果想主动触发加载，需要通过`ref`获取到组件实例主动调用`load`方法
         */
        autoLoad: {
            type: Boolean,
            default: true
        }
    },
    data: {
        LOAD_STATUS: {
            'IDLE': 0,
            'LOADING': 1,
            'LOAD_END': 2,
            'LOAD_FAIL': 3
        },
        inited: false,
        active: false,
        status: 0,
        oPageNum: pageNum,
        topHeight: 0,
        topHeightDef: 0,
        bottomText: '',
        bottomHeight: 52,
        bottomHeightDef: 52
    },
    // 组件
    components: {
        'c-infinite-scroll-bottom-bar': './InfiniteScrollBottomBar',
        'c-spread-bottom-btn': '../SpreadEnhanced/SpreadBottomBtn'
    }
}
</script>

<script>
/**
 * @file 无限滚动组件 c-infinite-scroll
 * @author chenrui09@baidu.com
 * @changer wangkai37@baidu.com
 */
export default {
    mounted() {
        let self = this;
        let maxHeight = this.bottomHeightDef;
        let lockedUp = false;
        let lockedDown = false;
        let pos = {
            startY: 0,
            moveY: 0,
            dy: 0
        };
        // 初始化事件
        this.onTouchStart = function (e) {

            // document.body.scrollHeight 页面整个的高度（包括超出屏幕的部分）
            // scrollY 当前滚动高度
            // window.innerHeight 屏幕高度

            // 页面滚动到顶部
            if (window.scrollY === 0) {
                lockedUp = true;
                pos.startY = e.touches[0].clientY;
            }
            // 页面滚动到底部
            if (document.body.scrollHeight - window.scrollY - window.innerHeight === 0) {
                lockedDown = true;
                pos.startY = e.touches[0].clientY;
            }
        };
        this.onTouchMove = function (e) {
            if (lockedDown) {
                pos.moveY = e.touches[0].clientY;
                if (pos.moveY < pos.startY) {
                    pos.dy = Math.min(Math.sqrt(pos.startY - pos.moveY) * 3, maxHeight);
                    self.bottomHeight = self.bottomHeightDef + pos.dy;
                }
            }
        };
        this.onTouchEnd = function () {
            if (lockedUp) {
                lockedUp = false;
                self.topHeight = self.topHeightDef;
            }
            if (lockedDown) {
                lockedDown = false;
                self.bottomHeight = self.bottomHeightDef;
            }
        };
        this.onScroll = () => {
            if (this.mode !== 'scroll') {
                return;
            }
            if (!self.active || self.status !== self.LOAD_STATUS.IDLE) {
                return;
            }
            const buffer = self.bufferHeightPx;
            // 当文档高度不满一屏时，scrollHeight 在 Safari 中还是一屏的高度，并不是实际文档的高度，这里改用 offsetHeight
            let left = document.body.offsetHeight - window.scrollY - window.innerHeight;
            if (left <= buffer) {
                self.load();
            }
        };
        this.$root.$on('attach', () => {
            self.attach();
        });
        this.$root.$on('detach', () => {
            self.detach();
        });
        if (!this.inited && !this.active) {
            this.inited = true;
            this.attach();
            // 自动加载
            if (this.autoLoad) {
                self.onScroll();
            }
        }
    },
    destroyed() {
        this.detach();
    },
    methods: {

        /**
         * 触发加载
         *
         * @public
         */
        load() {
            let self = this;
            this.status = this.LOAD_STATUS.LOADING;

            this.bottomText = this.loadingText;

            /**
             * 触发加载事件
             *
             * @event load
             * @property {number} param1.index 页码
             * @property {Function} param1.success 控制将状态置为加载成功的函数
             * @property {Function} param1.complete 控制将状态置为加载完成的函数
             * @property {Function} param1.fail 控制将状态置为加载失败的函数
             */
            this.$emit('load', {
                index: self.oPageNum,
                success() {
                    self.status = self.LOAD_STATUS.IDLE;
                    self.bottomText = '';
                    self.oPageNum++;
                    self.$nextTick(() => {
                        self.onScroll();
                    });
                },
                complete() {
                    self.status = self.LOAD_STATUS.LOAD_END;
                    self.bottomText = self.loadEndText;
                },
                fail() {
                    self.status = self.LOAD_STATUS.LOAD_FAIL;
                    self.bottomText = self.loadFailText;
                }
            });
        },
        reload() {
            if (this.status === this.LOAD_STATUS.LOAD_FAIL) {
                this.load();
            }
        },
        attach() {
            let container = window;
            let viewer = this.$el;
            if (this.inited && !this.active && this.mode === 'scroll') {
                this.active = true;
                viewer.addEventListener('touchstart', this.onTouchStart);
                viewer.addEventListener('touchmove', this.onTouchMove);
                viewer.addEventListener('touchend', this.onTouchEnd);
                viewer.addEventListener('touchcancel', this.onTouchEnd);
                container.addEventListener('scroll', this.onScroll);
            }
        },
        detach() {
            let container = window;
            let viewer = this.$el;
            if (this.inited && this.active && this.mode === 'scroll') {
                this.active = false;
                viewer.removeEventListener('touchstart', this.onTouchStart);
                viewer.removeEventListener('touchmove', this.onTouchMove);
                viewer.removeEventListener('touchend', this.onTouchEnd);
                viewer.removeEventListener('touchcancel', this.onTouchEnd);
                container.removeEventListener('scroll', this.onScroll);
            }
        },

        /**
         * 重置组件状态
         *
         * @public
         * @param {number} pageNum 初始化到第几页
         */
        reset(pageNum) {
            this.oPageNum = pageNum || 0;
            this.status = this.LOAD_STATUS.IDLE;
            this.bottomText = '';
        },

        /**
         * 主动设置加载状态为加载成功
         *
         * @public
         */
        success() {
            this.status = this.LOAD_STATUS.IDLE;
            this.bottomText = '';
            this.oPageNum++;
            this.$nextTick(() => {
                this.onScroll();
            });
        },

        /**
         * 主动设置加载状态为加载完成
         *
         * @public
         */
        complete() {
            this.status = this.LOAD_STATUS.LOAD_END;
            this.bottomText = this.loadEndText;
        },

        /**
         * 主动设置加载状态为加载失败
         *
         * @public
         */
        fail() {
            this.status = this.LOAD_STATUS.LOAD_FAIL;
            this.bottomText = this.loadFailText;
        }
    }
};
</script>

<style scoped lang="less">
// 动效曲线
.c-infinite-scroll-animating {
    transition-timing-function: cubic-bezier(0.1, 0.57, 0.1, 1);
    transition-duration: 0ms;
    transform: translateZ(0px);
}
// 顶部 bar
.c-infinite-scroll-topbar {
    height: 0;
}
</style>