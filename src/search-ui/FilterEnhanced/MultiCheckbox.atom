<!-- @ignore -->
<!-- 多选/单选 -->
<template>
    <section class="c-filter-multi-checkbox">
        <!-- 行数小于等于1时 或者 label 标签不存在时直接显示 -->
        <template a-if="math_ceil(item.options.length / 3) <= 1 || item.noSpread">
            <!-- 标签 -->
            <div class="c-gap-top-large">
                {{ item.label }}
            </div>
            <c-row
                a-for="(item1, index1) in math_ceil(item.options.length / 3)"
                :key="index1"
                :style="transition
                    ? {
                        'padding-left': '0',
                        'padding-right': '0'
                    }
                    : null
                "
                class="c-gap-top"
            >
                <template a-for="(item2, index2) in item.options">
                    <!-- 当当前索引大于等于前一行的最大索引，并且小于当前行的最大索引时才渲染 -->
                    <c-checkbox
                        a-if="index2 >= index1 * 3 && index2 < (index1 + 1) * 3"
                        :key="index2"
                        :text="item2.text"
                        :checked="isChecked(item, item2)"
                        :primary-color="primaryColor"
                        :border-color="primaryColor"
                        col="4"
                        @click="handleCheckboxItemClick({
                            item,
                            option: item2,
                            optionIndex: index2,
                            e: $event
                        })"
                    />
                </template>
                <!-- 占位 -->
                <template a-if="index1 == (math_ceil(item.options.length / 3) - 1) && (item.options.length % 3) !== 0">
                    <c-span
                        a-for="(item3, index3) in (3 - item.options.length % 3)"
                        :key="index3"
                        col="4"
                    />
                </template>
            </c-row>
        </template>
        <!-- 行数大于1时显示展开收起 -->
        <c-spread
            a-else
            :bottom="false"
            :fold-height="38"
            type="height"
            class="c-gap-top-small"
            @change="handleSpreadChange({
                index,
                item
            })"
        >
            <!-- 标签；作为 slot -->
            <div slot="button">
                {{ item.label }}
            </div>
            <!-- checkbox-item -->
            <!-- 下面的 style 是为了兼容 iphone5 上下边框不显示的问题 -->
            <c-row
                a-for="(item1, index1) in math_ceil(item.options.length / 3)"
                :key="index1"
                :class="{
                    'c-gap-top': index1 > 0
                }"
                :style="[
                    {
                        'padding-bottom': index1 === (math_ceil(item.options.length / 3) - 1)
                            ? '.01rem'
                            : '0'
                    },
                    transition
                        ? {
                            'padding-left': '0',
                            'padding-right': '0'
                        }
                        : null
                ]"
            >
                <template a-for="(item2, index2) in item.options">
                    <!-- 当当前索引大于等于前一行的最大索引，并且小于当前行的最大索引时才渲染 -->
                    <c-checkbox
                        a-if="index2 >= index1 * 3 && index2 < (index1 + 1) * 3"
                        :key="index2"
                        :text="item2.text"
                        :checked="isChecked(item, item2)"
                        :primary-color="primaryColor"
                        :border-color="primaryColor"
                        col="4"
                        @click="handleCheckboxItemClick({
                            item,
                            option: item2,
                            optionIndex: index2,
                            e: $event
                        })"
                    />
                </template>
                <!-- 占位 -->
                <template a-if="index1 == (math_ceil(item.options.length / 3) - 1) && (item.options.length % 3) !== 0">
                    <c-span
                        a-for="(item3, index3) in (3 - item.options.length % 3)"
                        :key="index3"
                        col="4"
                    />
                </template>
            </c-row>
        </c-spread>
    </section>
</template>

<script type="config">
    {
        props: {
            // store
            store: {
                type: Object
            },
            item: {
                type: Object
            },
            primaryColor: {
                type: String
            },
            // 是否增加动画
            transition: Boolean
        },
        components: {
            'c-row': '../Row/Row',
            'c-span': '../Row/Span',
            'c-checkbox': '../FilterEnhanced/Checkbox',
            'c-spread': '../SpreadEnhanced/SpreadEnhanced'
        }
    }
</script>

<script>
    export default {
        methods: {
            // 单选项点击事件
            handleCheckboxItemClick(obj) {
                const {
                    item,
                    option
                } = obj;

                // 判断类型时单选还是多选
                // 单选
                if (item.type === 'radio') {
                    // 如果是上次选中的
                    if (item.defaultValue === option.value) {
                        // 设置为空
                        this.$set(item, 'defaultValue', '');
                    }
                    else {
                        // 直接设置默认值即可
                        this.$set(item, 'defaultValue', option.value);
                    }
                }
                // 多选
                else if (item.type === 'checkbox') {
                    // 生成数组方便判断
                    let defaultValueArray = [];
                    if (item.defaultValue) {
                        defaultValueArray = item.defaultValue.split(',');
                    }
                    // 这里要注意去掉首尾空格，否则会有问题
                    defaultValueArray = defaultValueArray.map(item => item.trim());
                    // 算出选中的值在数组中的位置
                    const indexOfValue = defaultValueArray.indexOf(option.value);
                    // 如果默认数组里没有该值
                    if (indexOfValue === -1) {
                        // 把改值添加到数组里
                        defaultValueArray.push(option.value);
                    }
                    // 如果默认数组里有该值
                    else {
                        // 删除该元素
                        defaultValueArray.splice(indexOfValue, 1);
                    }
                    // 重新赋值
                    this.$set(item, 'defaultValue', defaultValueArray.join(','));
                }
                // 触发多选项点击事件
                this.store.emitCheckboxClick(obj);
            },
            // 展开收起改变事件
            handleSpreadChange(obj) {
            },
            // 判断是否被选中
            isChecked(item, option) {
                if (!(item.defaultValue || item.defaultValue === '')) {
                    return false;
                }
                // 首先通过逗号分隔将字符串转化为数组，为了实现单选和多选同时默认值的问题
                let defaultValueArray = item.defaultValue.split(',');
                // 这里要注意去掉首尾空格，否则会有问题
                defaultValueArray = defaultValueArray.map(arrItem => arrItem = arrItem.trim());
                if (defaultValueArray.indexOf(option.value) !== -1) {
                    return true;
                }
            }
        }
    };
</script>