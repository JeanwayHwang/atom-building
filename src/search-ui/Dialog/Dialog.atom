<template>
    <div
        ref="dialog"
        :style="[
            {
                position: 'fixed',
                top: '0',
                left: '0',
                width: screenWidth + 'px'
            }
        ]"
        class="dialog"
    >
        <div
            ref="wrapper"
            :style="[
                {
                    position: 'relative',
                    width: screenWidth + 'px'
                }
            ]"
            class="wrapper"
        >
            <!-- 蒙层 -->
            <c-mask
                ref="mask"
                :z-index="1"
                :prevent-default-touchmove="false"
                background-color="rgba(0, 0, 0, .65)"
                class="mask"
                @click="handleMaskClick"
                @touchmove="handleMaskTouchmove"
            />
            <!-- 浮层 -->
            <div
                ref="layer"
                :style="[
                    {
                        'display': 'none',
                        'width': width + 'px',
                        'max-height': maxHeight + 'px',
                        'background-color': '#fff',
                        'z-index': 1
                    }
                ]"
                class="layer"
                @touchmove="handleLayerTouchMove"
            >
                <!-- 上半区 -->
                <div
                    class="top"
                    @touchmove="handleTopTouchMove"
                >
                    <!-- 距离顶部的间隔 -->
                    <div
                        a-if="gapTop"
                        :style="{
                            paddingTop: gapTop + 'px'
                        }"
                        class="gap-top"
                    >
                    </div>
                    <!-- 标题 -->
                    <div
                        a-if="title"
                        class="title"
                        @touchmove.prevent
                    >
                        {{ title }}
                    </div>
                    <!-- @slot title 标题 slot -->
                    <slot name="title"/>
                    <!-- 内容区 -->
                    <transition
                        name="fade"
                        mode="out-in"
                    >
                        <div a-if="visible">
                            <!-- 这里用 a-if 是因为每次点击打开里面的内容都要重新滚动到最顶部 -->
                            <div
                                a-if="content"
                                ref="content"
                                :style="[
                                    {
                                        'max-height': contentMaxHeight + 'px',
                                        'text-align': contentTextAlign
                                    }
                                ]"
                                class="content c-font-medium c-color-gray"
                                @touchstart="handleContentTouchStart"
                                @touchmove="handleContentTouchMove"
                            >
                                {{ content }}
                            </div>
                            <!-- slot -->
                            <div
                                a-if="isDefaultSlot"
                                ref="slot"
                                :style="[
                                    {
                                        'max-height': contentMaxHeight + 'px',
                                        'text-align': contentTextAlign
                                    }
                                ]"
                                class="slot"
                                @touchstart="handleSlotTouchStart"
                                @touchmove="handleSlotTouchMove"
                            >
                                <!-- @slot 自定义内容区 -->
                                <slot/>
                            </div>
                        </div>
                    </transition>
                </div>
                <!-- 距离底部的间隔 -->
                <div
                    a-if="gapBottom"
                    :style="{
                        paddingBottom: gapBottom + 'px'
                    }"
                >
                </div>
                <!-- 下半区按钮 -->
                <div
                    a-if="btnOpts && btnOpts.length > 0"
                    class="bottom c-line-top"
                    @touchmove.prevent
                >
                    <!-- 按钮 -->
                    <c-touchable-feedback
                        a-for="(btn, btnIndex) in btnOpts"
                        :key="btnIndex"
                        :style="[
                            btnIndex !== 0
                                ? {
                                    'border-left': '1px solid #eee'
                                }
                                : {}
                        ]"
                        class="btn-touch"
                        data-module="c-db"
                    >
                        <div
                            :style="{
                                color: btn.color
                            }"
                            class="btn c-font-big c-color-link"
                            @click="handleBtnClick({
                                e: $event,
                                btn,
                                btnIndex
                            })"
                        >
                            {{ btn.text }}
                        </div>
                    </c-touchable-feedback>
                </div>
            </div>
        </div>
    </div>
</template>

<script type="config">
{
    props: {

        /**
         * 是否显示
         */
        visible: {
            type: Boolean,
            default: false
        },

        /**
         * 距离顶部的距离，单位为 px；默认为 23px；
         */
        gapTop: {
            type: Number,
            default: 23
        },

        /**
         * 距离底部的距离，单位为 px；默认为 0px；一般用于不显示按钮栏的时候做一些间距处理
         */
        gapBottom: {
            type: Number,
            default: 0
        },

        /**
         * 标题
         */
        title: {
            type: String,
            default: ''
        },

        /**
         * 标题高度，单位为 px；默认高度为 48px，其中34px 是标题的高度；14px 是标题距离顶部的距离；注：当使用自定义 title slot 的时候，需要传入 title slot 的高度
         */
        titleHeight: {
            type: Number,
            default: 48
        },

        /**
         * 内容
         */
        content: {
            type: String,
            default: ''
        },

        /**
         * 内容居中方式
         */
        contentTextAlign: {
            type: String,
            default: 'left'
        },

        /**
         * 按钮配置；传空数组则不显示按钮栏
         *
         * @property {string} event 该按钮绑定的事件名，点击该按钮时触发
         * @property {string} text 文案
         * @property {string} color 按钮文字颜色
         */
        btnOpts: {
            type: Array,
            default: [
                {
                    event: 'cancel',
                    text: '取消'
                },
                {
                    event: 'confirm',
                    text: '确定'
                }
            ]
        },

        /**
         * `z-index`值
         */
        zIndex: {
            type: Number,
            default: 501
        },

        /**
         * 动效配置
         *
         * @property {string} transition 渐变动效
         * @property {string} showTransition 显示动效
         * @property {string} hideTransition 隐藏动效
         */
        transitionOpts: {
            type: Object,
            default: {
                transition: 'all .3s cubic-bezier(.14, .1, .12, 1)',
                showTransition: 'all .3s cubic-bezier(.14, .1, .12, 1)',
                hideTransition: 'all .16s cubic-bezier(0, 0, 0.3, 1)'
            }
        }
    },
    data: {
        width: 0,
        pcWidth: 538,
        maxHeight: 'auto',
        contentMaxHeight: 'auto',
        // hide 方法保护，同一时间仅能触发一次 hide 方法
        hideProtection: false
    },
    components: {
        'c-row': '../Row/Row',
        'c-span': '../Row/Span',
        'c-line': '../Line/Line',
        'c-button': '../Button/Button',
        'c-mask': '../Mask/Mask',
        'c-touchable-feedback': '../TouchableFeedback/TouchableFeedback'
    }
}
</script>

<script>
// dom 操作
import {
    getScreenWidth,
    getScreenHeight,
    addDomTransition,
    clearDomTransition
} from '../util/domUtil';

// 阻止滚动穿透 mixin
import stopScrollThroughMixin from '../util/stopScrollThroughMixin';

// 横竖屏切换监听 mixin
import orientationMixin from '../util/orientationMixin';

// 阻止 iOS 默认双击上/下滑 mixin
import stopIOSDoubleTapMixin from '../util/stopIOSDoubleTapMixin';

// UA 用来判断是否是 iOS
import UA from '@searchfe/user-agent';
export default {
    mixins: [
        stopScrollThroughMixin,
        orientationMixin,
        stopIOSDoubleTapMixin
    ],
    // render
    render() {
        let defaultSlots = this.$slots.default;
        if (defaultSlots && defaultSlots.length) {
            // 设置 contentSlot 标识
            this.isDefaultSlot = true;
        }
        return this.$super.render();
    },
    mounted() {
        // 计算宽高
        this.calculateWidthHeight();

        // 如果默认显示
        if (this.visible) {
            // 在主线程完成后显示
            setTimeout(() => {
                this.show();
            }, 0);
        }
    },
    methods: {
        // 横竖屏切换监听
        mediaQueryOrientationListenerMixin(mediaQueryList) {
            // 如果对话框还显示
            if (this.visible) {
                // 先关闭对话框（不带动效），避免在横竖屏切换时出现奇怪的问题
                this.hide(false);
                // 触发关闭事件，保持内部和外部 visible 状态一致
                this.$emit('close');
            }
            // 这里的延迟是为了计算出准确的翻转手机后的 width、height
            setTimeout(() => {
                this.calculateWidthHeight();
            }, 500);
        },
        // 计算宽高
        calculateWidthHeight() {
            this.screenWidth = getScreenWidth();
            this.screenHeight = getScreenHeight();
            this.width = parseInt(
                this.$platform === 'pc'
                    ? this.pcWidth
                    : this.screenWidth * .8, 10
            );
            this.maxHeight = parseInt(this.screenHeight * .55, 10);
            // 48 px 是底部按钮栏的高度
            this.contentMaxHeight = this.maxHeight - this.gapTop - this.titleHeight - 48;
        },
        handleMaskClick() {

            /**
             * 蒙层点击事件
             *
             * @event maskclick
             */
            this.$emit('maskclick');
        },
        handleBtnClick(obj) {

            /**
             * 按钮点击事件
             *
             * @event btnclick
             * @property {Event} param1.e 透传的事件对象
             * @property {number} param1.btnIndex 点击按钮的索引
             * @property {object} param1.btn 点击的按钮配置
             * @property {string} param1.btn.event 该按钮绑定的事件名
             * @property {string} param1.btn.text 该按钮的文案
             */
            this.$emit('btnclick', obj);

            // 如果 .event 存在
            if (obj.btn.event) {

                /**
                 * 确认事件
                 *
                 * @event confirm
                 * @property {Event} param1.e 透传的事件对象
                 * @property {number} param1.btnIndex 点击按钮的索引
                 * @property {object} param1.btn 点击的按钮配置
                 * @property {string} param1.btn.event 该按钮绑定的事件名
                 * @property {string} param1.btn.text 该按钮的文案
                 */

                /**
                 * 取消事件
                 *
                 * @event cancel
                 * @property {Event} param1.e 透传的事件对象
                 * @property {number} param1.btnIndex 点击按钮的索引
                 * @property {object} param1.btn 点击的按钮配置
                 * @property {string} param1.btn.event 该按钮绑定的事件名
                 * @property {string} param1.btn.text 该按钮的文案
                 */
                this.$emit(obj.btn.event, obj);
            }
            // 如果事件名不是 close，触发 close
            if (obj.btn.event !== 'close') {

                /**
                 * 关闭事件
                 *
                 * @event close
                 */
                this.$emit('close');
            }
        },
        // 显示
        show() {
            this.$refs.mask.show();
            let dom = this.$refs.layer;
            clearDomTransition(dom);
            dom.style.display = 'block';
            dom.style.transform = 'scale(1.17)';
            dom.style.webkitTransform = 'scale(1.17)';
            dom.style.opacity = 0;
            this.$refs.dialog.style.height = this.screenHeight + 'px';
            this.$refs.wrapper.style.height = this.screenHeight + 'px';
            dom.offsetHeight;
            addDomTransition(dom, this.transitionOpts.showTransition);
            dom.style.opacity = 1;
            dom.style.transform = 'scale(1)';
            dom.style.webkitTransform = 'scale(1)';

            // iOS 取消双击上滑
            if (UA.isIOS()) {
                this.addBodyTouchendListenerStopIOSDoubleTapMixin();
            }
        },
        // 隐藏
        hide(animation = true) {
            // hide 方法保护，同一时间仅能触发一次 hide 方法
            if (this.hideProtection) {
                return;
            }
            this.hideProtection = true;
            this.$refs.mask.hide(animation);
            let dom = this.$refs.layer;
            clearDomTransition(dom);
            if (animation) {
                dom.style.display = 'block';
                dom.style.opacity = 1;
                dom.offsetHeight;
                addDomTransition(dom, this.transitionOpts.hideTransition);
            }
            dom.style.opacity = 0;
            setTimeout(() => {
                dom.style.display = 'none';
                this.$refs.dialog.style.height = 0;
                this.$refs.wrapper.style.height = 0;
                this.hideProtection = false;
            }, 300);

            // iOS 取消双击上滑
            if (UA.isIOS()) {
                this.removeBodyTouchendListenerStopIOSDoubleTapMixin();
            }
        },
        handleMaskTouchmove(e) {
            if (e.target !== this.$refs.content) {
                e.cancelable && e.preventDefault();
            }
        },
        handleLayerTouchMove(e) {
            if (e.target === e.currentTarget) {
                e.cancelable && e.preventDefault();
                e.stopPropagation();
            }
        },
        handleTopTouchMove(e) {
            if (e.target === e.currentTarget) {
                e.cancelable && e.preventDefault();
                e.stopPropagation();
            }
        },
        handleContentTouchStart(e) {
            this.handleTouchStartStopScrollThroughMixin(e);
        },
        handleContentTouchMove(e) {
            this.handleTouchMoveStopScrollThroughMixin(e, this.$refs.content);
        },
        handleSlotTouchStart(e) {
            this.handleTouchStartStopScrollThroughMixin(e);
        },
        handleSlotTouchMove(e) {
            this.handleTouchMoveStopScrollThroughMixin(e, this.$refs.slot);
        }
    },
    watch: {
        visible(newVal, oldVal) {
            if (newVal) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
};
</script>

<script type="php">
function render($ctx, $isXml = false) {
    $defaultSlots = $ctx->slots['default'];
    if ($defaultSlots && count($defaultSlots)) {
        // 设置 contentSlot 标识
        $ctx->_d['isDefaultSlot'] = true;
    }
    return parent::render($ctx);
}
</script>

<style lang="less" module>
.dialog {
    z-index: 501;
}
.wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
}
.mask {
    left: 0;
    top: 0;
}
.layer {
    border-radius: 13px;
    box-sizing: border-box;
    .top {
        padding-left: 24px;
        padding-right: 24px;
        .title {
            padding-bottom: 14px;
            text-align: center;
            box-sizing: border-box;
            color: #333;
            font: 24px/34px Arial, Helvetica, sans-serif;
        }
        .content {
            padding-bottom: 25px;
            overflow: scroll;
            box-sizing: border-box;
            // iOS 弹性滚动
            -webkit-overflow-scrolling: touch;
        }
        .slot {
            padding-bottom: 25px;
            overflow: scroll;
            box-sizing: border-box;
            // iOS 弹性滚动
            -webkit-overflow-scrolling: touch;
        }
        .content-inner {
        }
    }
    .bottom {
        display: flex;
        height: 48px;
        .btn-touch {
            flex: 1;
        }
        .btn {
            padding-top: 9px;
            text-align: center;
        }
    }
}
</style>

<style scoped>
.fade-enter-active,
.fade-leave-active {
    transition: opacity .16s cubic-bezier(0, 0, .3, 1);
}
.fade-enter,
.fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
    opacity: 0;
}
</style>
