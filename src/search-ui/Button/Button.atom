<template>
    <component
        :is="
            (url || (params && params.tcUrl))
                ? 'c-link'
                : 'button'
        "
        :url="url"
        :params="params"
        :voice-tag="text"
        :style="[
            primaryColor
                ? {
                    'border-color': primaryColor,
                    'color': primaryColor
                }
                : {},
            type === 'primary' && touchActive
                ? {
                    opacity: .9
                }
                : {},
            type === 'primary'
                ? {
                    'background-color': primaryColor ? primaryColor : '#555',
                    'color': '#fff',
                    'border-color': primaryColor
                }
                : {}
        ]"
        :class="[
            {
                'c-btn-small': size === 'small'
                    && type !== 'circle',
                'c-btn-disable': disabled,
                'c-btn-weak': type === 'weak',
                'c-btn-weak-auto': type === 'weak_auto',
                'c-btn-weak-gray': type === 'weak_gray',
                'c-btn-pills': type === 'pills',
                'c-btn-circle-big': type === 'circle'
                    && size !== 'small',
                'c-btn-circle': type === 'circle'
                    && size === 'small',
                'c-btn-touchable': !disabled,
                'c-btn-touchable-primary': type === 'primary',
                'c-btn-touchable-active': touchActive
            }
        ]"
        :rl-type="disabled ? 'stop' : (!isJump ? 'button' : null)"
        :rl-highlight-color="type === 'primary' ? 'rgba(255, 255, 255, .08)' : 'rgba(0, 0, 0, .08)'"
        rl-highlight-radius="3px"
        rl-node
        voice-action="click"
        role="button"
        class="c-btn c-gap-top-small c-gap-bottom-small"
        @rlShow="onRlShow"
        @rlHide="onRlHide"
        @rlShow.native="onRlShow"
        @rlHide.native="onRlHide"
        @click="onClick"
    >
        <!-- 兼容胶囊类型；胶囊类型不变黑 -->
        <!-- icon 为图标 type，只有通用图标才支持； -->
        <!-- iconCode 为图标代码； -->
        <!-- iconClass 为图标类名，需要自定义图标类的时候自行传入，用于支持业务图标 -->
        <c-icon
            a-if="icon || iconCode"
            :type="icon"
            :style="
                type === 'primary'
                    ? {
                        color: '#fff'
                    }
                    : {
                        color: primaryColor ? primaryColor : ''
                    }
            "
            :icon-class="iconClass"
            :code="iconCode"
            :class="[
                type === 'pills'
                    ? ''
                    : 'c-color',
                iconClass ? 'icon-custom' : ''
            ]"
        />
        <!-- eslint-disable atom/template-no-single-child -->
        <template a-if="(text || text === '0') && type !== 'pills'">
            <span>
                {{ text }}
            </span>
        </template>
        <!-- eslint-enable atom/template-no-single-child -->
        <span a-else-if="text || text === '0'">{{ text }}</span>
    </component>
</template>

<script type="config">
{
    props: {

        /**
         * 类型：default 默认；primary 主要；weak 弱；weak_auto 弱自适应；weak_gray 弱灰（已废弃，请用 [Slink](./Slink)）
         */
        type: String,

        /**
         * 文案
         */
        text: String,

        /**
         * 大小
         */
        size: String,

        /**
         * 是否禁用
         */
        disabled: {
            type: Boolean,
            default: false
        },

        /**
         * 图标类型，只有通用图标才支持
         */
        icon: String,

        /**
         * 图标类名，需要自定义图标类的时候自行传入，用于支持业务图标
         */
        iconClass: String,

        /**
         * 图标代码
         */
        iconCode: String,

        /**
         * 链接，可以被当作一个跳转链接
         */
        url: String,

        /**
         * 链接参数
         *
         * @see See [Link](./Link#API) `params`
         */
        params: Object,

        /**
         * 颜色
         */
        primaryColor: {
            type: String
        }
    },
    components: {
        'c-icon': '../Icon/Icon',
        'c-link': '../Link/Link'
    },
    data: {
        touchActive: false
    },
    computed: {
        isJump: !!(url || (params && params.tcUrl))
    }
}
</script>

<script>
export default {
    methods: {
        onClick(e) {
            if (this.disabled) {
                return;
            }

            /**
             * 点击事件
             *
             * @event click
             * @property {Event} param1 透传事件对象
             */
            this.$emit('click', e);
        },
        onRlShow(e) {
            // 使用 ResponsiveLink 提供的事件来实现自定义 background 点击态
            // 使用 background 是因为全局的点击态在位置变化时会错位，而使用 rl-highlight-self 可能会影响组件的布局
            // 自定义实现方案依赖 js 执行，自然模板如果不输出 js 则仍是全局的点击态
            this.touchActive = true;
            e.preventDefault();
        },
        onRlHide(e) {
            this.touchActive = false;
        }
    }
};
</script>

<style lang="less" scoped>
.c-btn {
    border-radius: 5px;
}

// 覆盖 c-btn-disable:active 背景色 (不变色)
.c-btn-disable {
    &:active {
        background-color: #fff;
    }
}

// type === 'primary' 不依赖 touchActive 的纯 css 降级实现
.c-btn-touchable-primary {
    &:active {
        opacity: .9;
    }
}

// 在启用了 JS 点击态时 ( [rl-root] )
// 覆盖禁用 pmd.css 中 :active 背景色
// 实现 touchActive 控制的点击态样式
[rl-root] {
    .c-btn,
    .c-btn-small,
    .c-btn-weak,
    .c-btn-weak-auto,
    .c-btn-pills,
    .c-btn-circle,
    .c-btn-circle-big {
        &:active {
            background-color: #fff;
        }
    }

    // 使用 background-color 修复白边问题
    // 叠加 rgba(0, 0, 0, .08) => #EBEBEB
    .c-btn-touchable-active {
        background-color: #ebebeb;
        &:active {
            background-color: #ebebeb;
        }
    }

    // 覆盖 type === 'primary' css 降级实现
    .c-btn-touchable-primary {
        &:active {
            opacity: 1;
        }
    }

    // 覆盖 pmd.css 中 :active 背景色
    .c-btn-weak-gray {
        &:active {
            background-color: #f8f8f8;
        }
    }
    // 叠加 rgba(0, 0, 0, .08) => #E4E4E4
    .c-btn-weak-gray.c-btn-touchable-active {
        background-color: #e4e4e4;
        &:active {
            background-color: #e4e4e4;
        }
    }
}

// primary touchable
.c-btn-touchable-active-primary {
    background-color: rgba(255, 255, 255, .1);
    &:active {
        background-color: rgba(255, 255, 255, .1);
    }
}
.icon-custom {
    margin-right: .05rem;
}
</style>
